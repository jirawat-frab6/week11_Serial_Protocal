
week11_Serial_Protocal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038cc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08003a64  08003a64  00013a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cb4  08003cb4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003cb4  08003cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cbc  08003cbc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cbc  08003cbc  00013cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000070  08003d34  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08003d34  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f23  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015f2  00000000  00000000  00027fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e8  00000000  00000000  000295b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000630  00000000  00000000  00029ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000158a4  00000000  00000000  0002a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000618b  00000000  00000000  0003fb74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085afe  00000000  00000000  00045cff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb7fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c60  00000000  00000000  000cb878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003a4c 	.word	0x08003a4c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08003a4c 	.word	0x08003a4c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004de:	f000 ff01 	bl	80012e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e2:	f000 f831 	bl	8000548 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e6:	f000 f8eb 	bl	80006c0 <MX_GPIO_Init>
	MX_DMA_Init();
 80004ea:	f000 f8c1 	bl	8000670 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80004ee:	f000 f895 	bl	800061c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	UART2.huart = &huart2;
 80004f2:	4b12      	ldr	r3, [pc, #72]	; (800053c <main+0x64>)
 80004f4:	4a12      	ldr	r2, [pc, #72]	; (8000540 <main+0x68>)
 80004f6:	601a      	str	r2, [r3, #0]
	UART2.RxLen = 255;
 80004f8:	4b10      	ldr	r3, [pc, #64]	; (800053c <main+0x64>)
 80004fa:	22ff      	movs	r2, #255	; 0xff
 80004fc:	80da      	strh	r2, [r3, #6]
	UART2.TxLen = 255;
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <main+0x64>)
 8000500:	22ff      	movs	r2, #255	; 0xff
 8000502:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <main+0x64>)
 8000506:	f000 f94b 	bl	80007a0 <UARTInit>
	UARTResetStart(&UART2);
 800050a:	480c      	ldr	r0, [pc, #48]	; (800053c <main+0x64>)
 800050c:	f000 f970 	bl	80007f0 <UARTResetStart>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		int16_t inputChar = UARTReadChar(&UART2);
 8000510:	480a      	ldr	r0, [pc, #40]	; (800053c <main+0x64>)
 8000512:	f000 f991 	bl	8000838 <UARTReadChar>
 8000516:	4603      	mov	r3, r0
 8000518:	80fb      	strh	r3, [r7, #6]
		if (inputChar != -1)
 800051a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800051e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000522:	d006      	beq.n	8000532 <main+0x5a>
#ifdef UARTDEBUG
			char temp[32];
			sprintf(temp, "Recived [%d]\r\n", inputChar);
			UARTTxWrite(&UART2, (uint8_t*) temp, strlen(temp));
#else
			DynamixelProtocal2(MainMemory, 1, inputChar, &UART2);
 8000524:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000528:	4b04      	ldr	r3, [pc, #16]	; (800053c <main+0x64>)
 800052a:	2101      	movs	r1, #1
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <main+0x6c>)
 800052e:	f000 fa45 	bl	80009bc <DynamixelProtocal2>

		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		UARTTxDumpBuffer(&UART2);
 8000532:	4802      	ldr	r0, [pc, #8]	; (800053c <main+0x64>)
 8000534:	f000 f9aa 	bl	800088c <UARTTxDumpBuffer>
	{
 8000538:	e7ea      	b.n	8000510 <main+0x38>
 800053a:	bf00      	nop
 800053c:	2000008c 	.word	0x2000008c
 8000540:	20000380 	.word	0x20000380
 8000544:	200000a4 	.word	0x200000a4

08000548 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f003 f9f5 	bl	8003946 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a27      	ldr	r2, [pc, #156]	; (8000614 <SystemClock_Config+0xcc>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <SystemClock_Config+0xd0>)
 8000592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	2310      	movs	r3, #16
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80005b8:	2310      	movs	r3, #16
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80005bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005c2:	2304      	movs	r3, #4
 80005c4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c6:	2304      	movs	r3, #4
 80005c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fd38 	bl	8002044 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x96>
	{
		Error_Handler();
 80005da:	f000 fce3 	bl	8000fa4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2302      	movs	r3, #2
 80005e4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ee:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2102      	movs	r1, #2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 ff92 	bl	8002524 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8000606:	f000 fccd 	bl	8000fa4 <Error_Handler>
	}
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	; 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <MX_USART2_UART_Init+0x50>)
 8000624:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800062c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_USART2_UART_Init+0x4c>)
 8000654:	f002 f958 	bl	8002908 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800065e:	f000 fca1 	bl	8000fa4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000380 	.word	0x20000380
 800066c:	40004400 	.word	0x40004400

08000670 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_DMA_Init+0x4c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a0f      	ldr	r2, [pc, #60]	; (80006bc <MX_DMA_Init+0x4c>)
 8000680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <MX_DMA_Init+0x4c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	2010      	movs	r0, #16
 8000698:	f000 ff71 	bl	800157e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800069c:	2010      	movs	r0, #16
 800069e:	f000 ff8a 	bl	80015b6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	2011      	movs	r0, #17
 80006a8:	f000 ff69 	bl	800157e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006ac:	2011      	movs	r0, #17
 80006ae:	f000 ff82 	bl	80015b6 <HAL_NVIC_EnableIRQ>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800

080006c0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a2c      	ldr	r2, [pc, #176]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a25      	ldr	r2, [pc, #148]	; (8000790 <MX_GPIO_Init+0xd0>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a17      	ldr	r2, [pc, #92]	; (8000790 <MX_GPIO_Init+0xd0>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2120      	movs	r1, #32
 800074a:	4812      	ldr	r0, [pc, #72]	; (8000794 <MX_GPIO_Init+0xd4>)
 800074c:	f001 fc60 	bl	8002010 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000754:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_GPIO_Init+0xd8>)
 8000758:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	4619      	mov	r1, r3
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_GPIO_Init+0xdc>)
 8000766:	f001 fad1 	bl	8001d0c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800076a:	2320      	movs	r3, #32
 800076c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076e:	2301      	movs	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_GPIO_Init+0xd4>)
 8000782:	f001 fac3 	bl	8001d0c <HAL_GPIO_Init>

}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40020000 	.word	0x40020000
 8000798:	10210000 	.word	0x10210000
 800079c:	40020800 	.word	0x40020800

080007a0 <UARTInit>:

/* USER CODE BEGIN 4 */
void UARTInit(UARTStucrture *uart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 80007a8:	4b10      	ldr	r3, [pc, #64]	; (80007ec <UARTInit+0x4c>)
 80007aa:	88db      	ldrh	r3, [r3, #6]
 80007ac:	4619      	mov	r1, r3
 80007ae:	2001      	movs	r0, #1
 80007b0:	f003 f88c 	bl	80038cc <calloc>
 80007b4:	4603      	mov	r3, r0
 80007b6:	461a      	mov	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <UARTInit+0x4c>)
 80007be:	889b      	ldrh	r3, [r3, #4]
 80007c0:	4619      	mov	r1, r3
 80007c2:	2001      	movs	r0, #1
 80007c4:	f003 f882 	bl	80038cc <calloc>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2200      	movs	r2, #0
 80007da:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	81da      	strh	r2, [r3, #14]

}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000008c 	.word	0x2000008c

080007f0 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6919      	ldr	r1, [r3, #16]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	88db      	ldrh	r3, [r3, #6]
 8000804:	461a      	mov	r2, r3
 8000806:	f002 f939 	bl	8002a7c <HAL_UART_Receive_DMA>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	88db      	ldrh	r3, [r3, #6]
 800081e:	461a      	mov	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	1ad3      	subs	r3, r2, r3
}
 800082c:	4618      	mov	r0, r3
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8000840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000844:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	8a9b      	ldrh	r3, [r3, #20]
 800084a:	461c      	mov	r4, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ffe0 	bl	8000812 <UARTGetRxHead>
 8000852:	4603      	mov	r3, r0
 8000854:	429c      	cmp	r4, r3
 8000856:	d013      	beq.n	8000880 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	8a92      	ldrh	r2, [r2, #20]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	8a9b      	ldrh	r3, [r3, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	88d2      	ldrh	r2, [r2, #6]
 8000870:	fb93 f1f2 	sdiv	r1, r3, r2
 8000874:	fb02 f201 	mul.w	r2, r2, r1
 8000878:	1a9b      	subs	r3, r3, r2
 800087a:	b29a      	uxth	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8000880:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8000884:	4618      	mov	r0, r3
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	bd90      	pop	{r4, r7, pc}

0800088c <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b20      	cmp	r3, #32
 80008a0:	d13d      	bne.n	800091e <UARTTxDumpBuffer+0x92>
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <UARTTxDumpBuffer+0x9c>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d139      	bne.n	800091e <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <UARTTxDumpBuffer+0x9c>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	89da      	ldrh	r2, [r3, #14]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	899b      	ldrh	r3, [r3, #12]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d02d      	beq.n	8000918 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	89da      	ldrh	r2, [r3, #14]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d906      	bls.n	80008d6 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	89da      	ldrh	r2, [r3, #14]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	e005      	b.n	80008e2 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	889a      	ldrh	r2, [r3, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80008de:	1ad3      	subs	r3, r2, r3
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	8992      	ldrh	r2, [r2, #12]
 80008f0:	4413      	add	r3, r2
 80008f2:	89fa      	ldrh	r2, [r7, #14]
 80008f4:	4619      	mov	r1, r3
 80008f6:	f002 f855 	bl	80029a4 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	899b      	ldrh	r3, [r3, #12]
 80008fe:	461a      	mov	r2, r3
 8000900:	89fb      	ldrh	r3, [r7, #14]
 8000902:	4413      	add	r3, r2
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	8892      	ldrh	r2, [r2, #4]
 8000908:	fb93 f1f2 	sdiv	r1, r3, r2
 800090c:	fb02 f201 	mul.w	r2, r2, r1
 8000910:	1a9b      	subs	r3, r3, r2
 8000912:	b29a      	uxth	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8000918:	4b03      	ldr	r3, [pc, #12]	; (8000928 <UARTTxDumpBuffer+0x9c>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
	}
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200001a3 	.word	0x200001a3

0800092c <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	4613      	mov	r3, r2
 8000938:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	889b      	ldrh	r3, [r3, #4]
 800093e:	88fa      	ldrh	r2, [r7, #6]
 8000940:	4293      	cmp	r3, r2
 8000942:	bf28      	it	cs
 8000944:	4613      	movcs	r3, r2
 8000946:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8000948:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	889b      	ldrh	r3, [r3, #4]
 800094e:	4619      	mov	r1, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	89db      	ldrh	r3, [r3, #14]
 8000954:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8000956:	4293      	cmp	r3, r2
 8000958:	bfa8      	it	ge
 800095a:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 800095c:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	89d2      	ldrh	r2, [r2, #14]
 8000966:	4413      	add	r3, r2
 8000968:	8aba      	ldrh	r2, [r7, #20]
 800096a:	68b9      	ldr	r1, [r7, #8]
 800096c:	4618      	mov	r0, r3
 800096e:	f002 ffdf 	bl	8003930 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	89db      	ldrh	r3, [r3, #14]
 8000976:	461a      	mov	r2, r3
 8000978:	8afb      	ldrh	r3, [r7, #22]
 800097a:	4413      	add	r3, r2
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	8892      	ldrh	r2, [r2, #4]
 8000980:	fb93 f1f2 	sdiv	r1, r3, r2
 8000984:	fb02 f201 	mul.w	r2, r2, r1
 8000988:	1a9b      	subs	r3, r3, r2
 800098a:	b29a      	uxth	r2, r3
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8000990:	8afa      	ldrh	r2, [r7, #22]
 8000992:	8abb      	ldrh	r3, [r7, #20]
 8000994:	429a      	cmp	r2, r3
 8000996:	d00a      	beq.n	80009ae <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	6898      	ldr	r0, [r3, #8]
 800099c:	8abb      	ldrh	r3, [r7, #20]
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 80009a2:	8afa      	ldrh	r2, [r7, #22]
 80009a4:	8abb      	ldrh	r3, [r7, #20]
 80009a6:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80009a8:	461a      	mov	r2, r3
 80009aa:	f002 ffc1 	bl	8003930 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 80009ae:	68f8      	ldr	r0, [r7, #12]
 80009b0:	f7ff ff6c 	bl	800088c <UARTTxDumpBuffer>

}
 80009b4:	bf00      	nop
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <DynamixelProtocal2>:

void DynamixelProtocal2(uint8_t *Memory, uint8_t MotorID, int16_t dataIn,
		UARTStucrture *uart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b09a      	sub	sp, #104	; 0x68
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	460b      	mov	r3, r1
 80009c8:	72fb      	strb	r3, [r7, #11]
 80009ca:	4613      	mov	r3, r2
 80009cc:	813b      	strh	r3, [r7, #8]
	static uint16_t CRCCheck = 0;
	static uint16_t packetSize = 0;
	static uint16_t CRC_accum;

	//State Machine
	switch (State)
 80009ce:	4b79      	ldr	r3, [pc, #484]	; (8000bb4 <DynamixelProtocal2+0x1f8>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b0a      	cmp	r3, #10
 80009d4:	f200 827d 	bhi.w	8000ed2 <DynamixelProtocal2+0x516>
 80009d8:	a201      	add	r2, pc, #4	; (adr r2, 80009e0 <DynamixelProtocal2+0x24>)
 80009da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009de:	bf00      	nop
 80009e0:	08000a0d 	.word	0x08000a0d
 80009e4:	08000a1f 	.word	0x08000a1f
 80009e8:	08000a31 	.word	0x08000a31
 80009ec:	08000a53 	.word	0x08000a53
 80009f0:	08000a6b 	.word	0x08000a6b
 80009f4:	08000aa1 	.word	0x08000aa1
 80009f8:	08000ab3 	.word	0x08000ab3
 80009fc:	08000ad1 	.word	0x08000ad1
 8000a00:	08000ae1 	.word	0x08000ae1
 8000a04:	08000b11 	.word	0x08000b11
 8000a08:	08000b4d 	.word	0x08000b4d
	{
	case DNMXP_idle:
		if (dataIn == 0xFF)
 8000a0c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a10:	2bff      	cmp	r3, #255	; 0xff
 8000a12:	f040 8259 	bne.w	8000ec8 <DynamixelProtocal2+0x50c>
			State = DNMXP_1stHeader;
 8000a16:	4b67      	ldr	r3, [pc, #412]	; (8000bb4 <DynamixelProtocal2+0x1f8>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	701a      	strb	r2, [r3, #0]
		break;
 8000a1c:	e254      	b.n	8000ec8 <DynamixelProtocal2+0x50c>
	case DNMXP_1stHeader:
		if (dataIn == 0xFF)
 8000a1e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a22:	2bff      	cmp	r3, #255	; 0xff
 8000a24:	f040 8252 	bne.w	8000ecc <DynamixelProtocal2+0x510>
			State = DNMXP_2ndHeader;
 8000a28:	4b62      	ldr	r3, [pc, #392]	; (8000bb4 <DynamixelProtocal2+0x1f8>)
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	701a      	strb	r2, [r3, #0]
		break;
 8000a2e:	e24d      	b.n	8000ecc <DynamixelProtocal2+0x510>
	case DNMXP_2ndHeader:
		if (dataIn == 0xFD)
 8000a30:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a34:	2bfd      	cmp	r3, #253	; 0xfd
 8000a36:	d103      	bne.n	8000a40 <DynamixelProtocal2+0x84>
			State = DNMXP_3rdHeader;
 8000a38:	4b5e      	ldr	r3, [pc, #376]	; (8000bb4 <DynamixelProtocal2+0x1f8>)
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	701a      	strb	r2, [r3, #0]
		else if (dataIn == 0xFF)
			; //do nothing
		else
			State = DNMXP_idle;
		break;
 8000a3e:	e247      	b.n	8000ed0 <DynamixelProtocal2+0x514>
		else if (dataIn == 0xFF)
 8000a40:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a44:	2bff      	cmp	r3, #255	; 0xff
 8000a46:	f000 8243 	beq.w	8000ed0 <DynamixelProtocal2+0x514>
			State = DNMXP_idle;
 8000a4a:	4b5a      	ldr	r3, [pc, #360]	; (8000bb4 <DynamixelProtocal2+0x1f8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]
		break;
 8000a50:	e23e      	b.n	8000ed0 <DynamixelProtocal2+0x514>
	case DNMXP_3rdHeader:
		if (dataIn == 0x00)
 8000a52:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d103      	bne.n	8000a62 <DynamixelProtocal2+0xa6>
			State = DNMXP_Reserved;
 8000a5a:	4b56      	ldr	r3, [pc, #344]	; (8000bb4 <DynamixelProtocal2+0x1f8>)
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	701a      	strb	r2, [r3, #0]
		else
			State = DNMXP_idle;
		break;
 8000a60:	e237      	b.n	8000ed2 <DynamixelProtocal2+0x516>
			State = DNMXP_idle;
 8000a62:	4b54      	ldr	r3, [pc, #336]	; (8000bb4 <DynamixelProtocal2+0x1f8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
		break;
 8000a68:	e233      	b.n	8000ed2 <DynamixelProtocal2+0x516>
	case DNMXP_Reserved:
		if ((dataIn == MotorID) | (dataIn == 0xFE))
 8000a6a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000a6e:	7afb      	ldrb	r3, [r7, #11]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	bf0c      	ite	eq
 8000a74:	2301      	moveq	r3, #1
 8000a76:	2300      	movne	r3, #0
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000a7e:	2bfe      	cmp	r3, #254	; 0xfe
 8000a80:	bf0c      	ite	eq
 8000a82:	2301      	moveq	r3, #1
 8000a84:	2300      	movne	r3, #0
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <DynamixelProtocal2+0xdc>
			State = DNMXP_ID;
 8000a90:	4b48      	ldr	r3, [pc, #288]	; (8000bb4 <DynamixelProtocal2+0x1f8>)
 8000a92:	2205      	movs	r2, #5
 8000a94:	701a      	strb	r2, [r3, #0]
		else
			State = DNMXP_idle;
		break;
 8000a96:	e21c      	b.n	8000ed2 <DynamixelProtocal2+0x516>
			State = DNMXP_idle;
 8000a98:	4b46      	ldr	r3, [pc, #280]	; (8000bb4 <DynamixelProtocal2+0x1f8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
		break;
 8000a9e:	e218      	b.n	8000ed2 <DynamixelProtocal2+0x516>
	case DNMXP_ID:
		datalen = dataIn & 0xFF;
 8000aa0:	893b      	ldrh	r3, [r7, #8]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b44      	ldr	r3, [pc, #272]	; (8000bb8 <DynamixelProtocal2+0x1fc>)
 8000aa8:	801a      	strh	r2, [r3, #0]
		State = DNMXP_LEN1;
 8000aaa:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <DynamixelProtocal2+0x1f8>)
 8000aac:	2206      	movs	r2, #6
 8000aae:	701a      	strb	r2, [r3, #0]
		break;
 8000ab0:	e20f      	b.n	8000ed2 <DynamixelProtocal2+0x516>
	case DNMXP_LEN1:
		datalen |= (dataIn & 0xFF) << 8;
 8000ab2:	893b      	ldrh	r3, [r7, #8]
 8000ab4:	021b      	lsls	r3, r3, #8
 8000ab6:	b21a      	sxth	r2, r3
 8000ab8:	4b3f      	ldr	r3, [pc, #252]	; (8000bb8 <DynamixelProtocal2+0x1fc>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	b21b      	sxth	r3, r3
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	b21b      	sxth	r3, r3
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	4b3c      	ldr	r3, [pc, #240]	; (8000bb8 <DynamixelProtocal2+0x1fc>)
 8000ac6:	801a      	strh	r2, [r3, #0]
		State = DNMXP_LEN2;
 8000ac8:	4b3a      	ldr	r3, [pc, #232]	; (8000bb4 <DynamixelProtocal2+0x1f8>)
 8000aca:	2207      	movs	r2, #7
 8000acc:	701a      	strb	r2, [r3, #0]
		break;
 8000ace:	e200      	b.n	8000ed2 <DynamixelProtocal2+0x516>
	case DNMXP_LEN2:
		inst = dataIn;
 8000ad0:	893b      	ldrh	r3, [r7, #8]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	4b39      	ldr	r3, [pc, #228]	; (8000bbc <DynamixelProtocal2+0x200>)
 8000ad6:	701a      	strb	r2, [r3, #0]
		State = DNMXP_Inst;
 8000ad8:	4b36      	ldr	r3, [pc, #216]	; (8000bb4 <DynamixelProtocal2+0x1f8>)
 8000ada:	2208      	movs	r2, #8
 8000adc:	701a      	strb	r2, [r3, #0]
		break;
 8000ade:	e1f8      	b.n	8000ed2 <DynamixelProtocal2+0x516>
	case DNMXP_Inst:
		if (datalen > 3)
 8000ae0:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <DynamixelProtocal2+0x1fc>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	2b03      	cmp	r3, #3
 8000ae6:	d90a      	bls.n	8000afe <DynamixelProtocal2+0x142>
		{
			parameter[0] = dataIn;
 8000ae8:	893b      	ldrh	r3, [r7, #8]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b34      	ldr	r3, [pc, #208]	; (8000bc0 <DynamixelProtocal2+0x204>)
 8000aee:	701a      	strb	r2, [r3, #0]
			CollectedData = 1; //inst 1 + para[0] 1
 8000af0:	4b34      	ldr	r3, [pc, #208]	; (8000bc4 <DynamixelProtocal2+0x208>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	801a      	strh	r2, [r3, #0]
			State = DNMXP_ParameterCollect;
 8000af6:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <DynamixelProtocal2+0x1f8>)
 8000af8:	2209      	movs	r2, #9
 8000afa:	701a      	strb	r2, [r3, #0]
		{
			CRCCheck = dataIn & 0xff;
			State = DNMXP_CRCAndExecute;
		}

		break;
 8000afc:	e1e9      	b.n	8000ed2 <DynamixelProtocal2+0x516>
			CRCCheck = dataIn & 0xff;
 8000afe:	893b      	ldrh	r3, [r7, #8]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <DynamixelProtocal2+0x20c>)
 8000b06:	801a      	strh	r2, [r3, #0]
			State = DNMXP_CRCAndExecute;
 8000b08:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <DynamixelProtocal2+0x1f8>)
 8000b0a:	220a      	movs	r2, #10
 8000b0c:	701a      	strb	r2, [r3, #0]
		break;
 8000b0e:	e1e0      	b.n	8000ed2 <DynamixelProtocal2+0x516>
	case DNMXP_ParameterCollect:

		if (datalen-3 > CollectedData)
 8000b10:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <DynamixelProtocal2+0x1fc>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	4a2b      	ldr	r2, [pc, #172]	; (8000bc4 <DynamixelProtocal2+0x208>)
 8000b18:	8812      	ldrh	r2, [r2, #0]
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	dd0d      	ble.n	8000b3a <DynamixelProtocal2+0x17e>
		{
			parameter[CollectedData] = dataIn;
 8000b1e:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <DynamixelProtocal2+0x208>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	893b      	ldrh	r3, [r7, #8]
 8000b26:	b2d9      	uxtb	r1, r3
 8000b28:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <DynamixelProtocal2+0x204>)
 8000b2a:	5499      	strb	r1, [r3, r2]
			CollectedData++;
 8000b2c:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <DynamixelProtocal2+0x208>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	4b23      	ldr	r3, [pc, #140]	; (8000bc4 <DynamixelProtocal2+0x208>)
 8000b36:	801a      	strh	r2, [r3, #0]
		else
		{
			CRCCheck = dataIn & 0xff;
			State = DNMXP_CRCAndExecute;
		}
		break;
 8000b38:	e1cb      	b.n	8000ed2 <DynamixelProtocal2+0x516>
			CRCCheck = dataIn & 0xff;
 8000b3a:	893b      	ldrh	r3, [r7, #8]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <DynamixelProtocal2+0x20c>)
 8000b42:	801a      	strh	r2, [r3, #0]
			State = DNMXP_CRCAndExecute;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <DynamixelProtocal2+0x1f8>)
 8000b46:	220a      	movs	r2, #10
 8000b48:	701a      	strb	r2, [r3, #0]
		break;
 8000b4a:	e1c2      	b.n	8000ed2 <DynamixelProtocal2+0x516>
	case DNMXP_CRCAndExecute:
		CRCCheck |= (dataIn & 0xff) << 8;
 8000b4c:	893b      	ldrh	r3, [r7, #8]
 8000b4e:	021b      	lsls	r3, r3, #8
 8000b50:	b21a      	sxth	r2, r3
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <DynamixelProtocal2+0x20c>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	b21b      	sxth	r3, r3
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <DynamixelProtocal2+0x20c>)
 8000b60:	801a      	strh	r2, [r3, #0]
		//Check CRC
		CRC_accum = 0;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <DynamixelProtocal2+0x210>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	801a      	strh	r2, [r3, #0]
		packetSize = datalen + 7;
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <DynamixelProtocal2+0x1fc>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	3307      	adds	r3, #7
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <DynamixelProtocal2+0x214>)
 8000b72:	801a      	strh	r2, [r3, #0]
		//check overlapse buffer
		if (uart->RxTail - packetSize >= 0) //not overlapse
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	8a9b      	ldrh	r3, [r3, #20]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <DynamixelProtocal2+0x214>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db27      	blt.n	8000bd4 <DynamixelProtocal2+0x218>
		{
			CRC_accum = update_crc(CRC_accum,
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <DynamixelProtocal2+0x210>)
 8000b86:	8818      	ldrh	r0, [r3, #0]
					&(uart->RxBuffer[uart->RxTail - packetSize]),
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	691b      	ldr	r3, [r3, #16]
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	8a92      	ldrh	r2, [r2, #20]
 8000b90:	4611      	mov	r1, r2
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <DynamixelProtocal2+0x214>)
 8000b94:	8812      	ldrh	r2, [r2, #0]
 8000b96:	1a8a      	subs	r2, r1, r2
 8000b98:	1899      	adds	r1, r3, r2
			CRC_accum = update_crc(CRC_accum,
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <DynamixelProtocal2+0x214>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	3b02      	subs	r3, #2
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	f000 f9b0 	bl	8000f08 <update_crc>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <DynamixelProtocal2+0x210>)
 8000bae:	801a      	strh	r2, [r3, #0]
 8000bb0:	e03e      	b.n	8000c30 <DynamixelProtocal2+0x274>
 8000bb2:	bf00      	nop
 8000bb4:	200001a4 	.word	0x200001a4
 8000bb8:	200001a6 	.word	0x200001a6
 8000bbc:	200001a8 	.word	0x200001a8
 8000bc0:	200001ac 	.word	0x200001ac
 8000bc4:	200002ac 	.word	0x200002ac
 8000bc8:	200002ae 	.word	0x200002ae
 8000bcc:	200002b0 	.word	0x200002b0
 8000bd0:	200002b2 	.word	0x200002b2
					packetSize - 2);
		}
		else//overlapse
		{
			uint16_t firstPartStart = uart->RxTail - packetSize + uart->RxLen;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	8a9a      	ldrh	r2, [r3, #20]
 8000bd8:	4bc0      	ldr	r3, [pc, #768]	; (8000edc <DynamixelProtocal2+0x520>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	88db      	ldrh	r3, [r3, #6]
 8000be4:	4413      	add	r3, r2
 8000be6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			CRC_accum = update_crc(CRC_accum, &(uart->RxBuffer[firstPartStart]),
 8000bea:	4bbd      	ldr	r3, [pc, #756]	; (8000ee0 <DynamixelProtocal2+0x524>)
 8000bec:	8818      	ldrh	r0, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	691a      	ldr	r2, [r3, #16]
 8000bf2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000bf6:	18d1      	adds	r1, r2, r3
					uart->RxLen - firstPartStart);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	88da      	ldrh	r2, [r3, #6]
			CRC_accum = update_crc(CRC_accum, &(uart->RxBuffer[firstPartStart]),
 8000bfc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	f000 f97f 	bl	8000f08 <update_crc>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4bb4      	ldr	r3, [pc, #720]	; (8000ee0 <DynamixelProtocal2+0x524>)
 8000c10:	801a      	strh	r2, [r3, #0]
			CRC_accum = update_crc(CRC_accum, uart->RxBuffer, uart->RxTail - 2);
 8000c12:	4bb3      	ldr	r3, [pc, #716]	; (8000ee0 <DynamixelProtocal2+0x524>)
 8000c14:	8818      	ldrh	r0, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6919      	ldr	r1, [r3, #16]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	8a9b      	ldrh	r3, [r3, #20]
 8000c1e:	3b02      	subs	r3, #2
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	461a      	mov	r2, r3
 8000c24:	f000 f970 	bl	8000f08 <update_crc>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4bac      	ldr	r3, [pc, #688]	; (8000ee0 <DynamixelProtocal2+0x524>)
 8000c2e:	801a      	strh	r2, [r3, #0]

		}

		if (CRC_accum == CRCCheck)
 8000c30:	4bab      	ldr	r3, [pc, #684]	; (8000ee0 <DynamixelProtocal2+0x524>)
 8000c32:	881a      	ldrh	r2, [r3, #0]
 8000c34:	4bab      	ldr	r3, [pc, #684]	; (8000ee4 <DynamixelProtocal2+0x528>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	f040 811b 	bne.w	8000e74 <DynamixelProtocal2+0x4b8>
		{
			switch (inst)
 8000c3e:	4baa      	ldr	r3, [pc, #680]	; (8000ee8 <DynamixelProtocal2+0x52c>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d030      	beq.n	8000ca8 <DynamixelProtocal2+0x2ec>
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	f000 808b 	beq.w	8000d62 <DynamixelProtocal2+0x3a6>
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	f040 80e6 	bne.w	8000e1e <DynamixelProtocal2+0x462>
			{
			case 0x01:// ping
			{
				//create packet template
				uint8_t temp[] =
 8000c52:	4aa6      	ldr	r2, [pc, #664]	; (8000eec <DynamixelProtocal2+0x530>)
 8000c54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c58:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c5a:	c303      	stmia	r3!, {r0, r1}
 8000c5c:	801a      	strh	r2, [r3, #0]
 8000c5e:	3302      	adds	r3, #2
 8000c60:	0c12      	lsrs	r2, r2, #16
 8000c62:	701a      	strb	r2, [r3, #0]
				{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x00, 0x00,
						0x00 };
				//config MotorID
				temp[4] = MotorID;
 8000c64:	7afb      	ldrb	r3, [r7, #11]
 8000c66:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
				//calcuate CRC
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000c6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c6e:	2209      	movs	r2, #9
 8000c70:	4619      	mov	r1, r3
 8000c72:	2000      	movs	r0, #0
 8000c74:	f000 f948 	bl	8000f08 <update_crc>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				temp[9] = crc_calc & 0xff;
 8000c7e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
				temp[10] = (crc_calc >> 8) & 0xFF;
 8000c88:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
				//Sent Response Packet
				UARTTxWrite(uart, temp, 11);
 8000c96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c9a:	220b      	movs	r2, #11
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff fe44 	bl	800092c <UARTTxWrite>
				break;
 8000ca4:	bf00      	nop
 8000ca6:	e10b      	b.n	8000ec0 <DynamixelProtocal2+0x504>
			}

			case 0x02://READ
			{
				uint16_t startAddr = (parameter[0]&0xFF)|(parameter[1]<<8 &0xFF);
 8000ca8:	4b91      	ldr	r3, [pc, #580]	; (8000ef0 <DynamixelProtocal2+0x534>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				uint16_t numberOfDataToRead = (parameter[2]&0xFF)|(parameter[3]<<8 &0xFF);
 8000cb0:	4b8f      	ldr	r3, [pc, #572]	; (8000ef0 <DynamixelProtocal2+0x534>)
 8000cb2:	789b      	ldrb	r3, [r3, #2]
 8000cb4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				uint8_t temp[] = {0xff,0xff,0xfd,0x00,0x00,0x00,0x00,0x55,0x00};
 8000cb8:	4a8e      	ldr	r2, [pc, #568]	; (8000ef4 <DynamixelProtocal2+0x538>)
 8000cba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cc0:	c303      	stmia	r3!, {r0, r1}
 8000cc2:	701a      	strb	r2, [r3, #0]
				temp[4] = MotorID;
 8000cc4:	7afb      	ldrb	r3, [r7, #11]
 8000cc6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				temp[5] = (numberOfDataToRead + 4) & 0xff ; // +inst+err+crc1+crc2
 8000cca:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				temp[6] = ((numberOfDataToRead + 4)>>8) & 0xff ;
 8000cd8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000cdc:	3304      	adds	r3, #4
 8000cde:	121b      	asrs	r3, r3, #8
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000ce6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cea:	2209      	movs	r2, #9
 8000cec:	4619      	mov	r1, r3
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 f90a 	bl	8000f08 <update_crc>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				crc_calc = update_crc(crc_calc ,&(Memory[startAddr]),numberOfDataToRead);
 8000cfa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	18d1      	adds	r1, r2, r3
 8000d02:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8000d06:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f8fc 	bl	8000f08 <update_crc>
 8000d10:	4603      	mov	r3, r0
 8000d12:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				uint8_t crctemp[2];
				crctemp[0] = crc_calc&0xff;
 8000d16:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				crctemp[1] = (crc_calc>>8)&0xff;
 8000d20:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				UARTTxWrite(uart, temp,9);
 8000d2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d32:	2209      	movs	r2, #9
 8000d34:	4619      	mov	r1, r3
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff fdf8 	bl	800092c <UARTTxWrite>
				UARTTxWrite(uart, &(Memory[startAddr]),numberOfDataToRead);
 8000d3c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	4413      	add	r3, r2
 8000d44:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8000d48:	4619      	mov	r1, r3
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff fdee 	bl	800092c <UARTTxWrite>
				UARTTxWrite(uart, crctemp,2);
 8000d50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d54:	2202      	movs	r2, #2
 8000d56:	4619      	mov	r1, r3
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fde7 	bl	800092c <UARTTxWrite>
				break;
 8000d5e:	bf00      	nop
 8000d60:	e0ae      	b.n	8000ec0 <DynamixelProtocal2+0x504>
					sum |= parameter[i] << (8*(i-2));
				}
				Memory[parameter[0] | (parameter[1]<<8)] = sum;
				*/

				for(int i = 2 ;i < CollectedData ; i++){
 8000d62:	2302      	movs	r3, #2
 8000d64:	667b      	str	r3, [r7, #100]	; 0x64
 8000d66:	e014      	b.n	8000d92 <DynamixelProtocal2+0x3d6>
					Memory[parameter[0] | (parameter[1]<<8) + (i-2)] = parameter[i];
 8000d68:	4b61      	ldr	r3, [pc, #388]	; (8000ef0 <DynamixelProtocal2+0x534>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4b60      	ldr	r3, [pc, #384]	; (8000ef0 <DynamixelProtocal2+0x534>)
 8000d70:	785b      	ldrb	r3, [r3, #1]
 8000d72:	021a      	lsls	r2, r3, #8
 8000d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d76:	3b02      	subs	r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	430b      	orrs	r3, r1
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4413      	add	r3, r2
 8000d82:	495b      	ldr	r1, [pc, #364]	; (8000ef0 <DynamixelProtocal2+0x534>)
 8000d84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d86:	440a      	add	r2, r1
 8000d88:	7812      	ldrb	r2, [r2, #0]
 8000d8a:	701a      	strb	r2, [r3, #0]
				for(int i = 2 ;i < CollectedData ; i++){
 8000d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d8e:	3301      	adds	r3, #1
 8000d90:	667b      	str	r3, [r7, #100]	; 0x64
 8000d92:	4b59      	ldr	r3, [pc, #356]	; (8000ef8 <DynamixelProtocal2+0x53c>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	dbe4      	blt.n	8000d68 <DynamixelProtocal2+0x3ac>
				}

				uint8_t temp[] = {0xff,0xff,0xfd,0x00,MotorID,0x04,0x00,0x55,0x00,0x00,0x00};
 8000d9e:	23ff      	movs	r3, #255	; 0xff
 8000da0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000da4:	23ff      	movs	r3, #255	; 0xff
 8000da6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8000daa:	23fd      	movs	r3, #253	; 0xfd
 8000dac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8000db0:	2300      	movs	r3, #0
 8000db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000db6:	7afb      	ldrb	r3, [r7, #11]
 8000db8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8000dc8:	2355      	movs	r3, #85	; 0x55
 8000dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				uint16_t crc_calc = update_crc(0,temp,9);
 8000de0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de4:	2209      	movs	r2, #9
 8000de6:	4619      	mov	r1, r3
 8000de8:	2000      	movs	r0, #0
 8000dea:	f000 f88d 	bl	8000f08 <update_crc>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				temp[9] = crc_calc & 0xff;
 8000df4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				temp[10] = (crc_calc >> 8) &0xff;
 8000dfe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000e02:	0a1b      	lsrs	r3, r3, #8
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				UARTTxWrite(uart, temp, 11);
 8000e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e10:	220b      	movs	r2, #11
 8000e12:	4619      	mov	r1, r3
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff fd89 	bl	800092c <UARTTxWrite>

				break;
 8000e1a:	bf00      	nop
 8000e1c:	e050      	b.n	8000ec0 <DynamixelProtocal2+0x504>

			}
			default: //Unknown Inst
			{
				uint8_t temp[] =
 8000e1e:	4a37      	ldr	r2, [pc, #220]	; (8000efc <DynamixelProtocal2+0x540>)
 8000e20:	f107 0320 	add.w	r3, r7, #32
 8000e24:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e26:	c303      	stmia	r3!, {r0, r1}
 8000e28:	801a      	strh	r2, [r3, #0]
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	0c12      	lsrs	r2, r2, #16
 8000e2e:	701a      	strb	r2, [r3, #0]
				{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x02, 0x00,
						0x00 };
				temp[4] = MotorID;
 8000e30:	7afb      	ldrb	r3, [r7, #11]
 8000e32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				uint16_t crc_calc = update_crc(0, temp, 9);
 8000e36:	f107 0320 	add.w	r3, r7, #32
 8000e3a:	2209      	movs	r2, #9
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 f862 	bl	8000f08 <update_crc>
 8000e44:	4603      	mov	r3, r0
 8000e46:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				temp[9] = crc_calc & 0xff;
 8000e4a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				temp[10] = (crc_calc >> 8) & 0xFF;
 8000e54:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				UARTTxWrite(uart, temp, 11);
 8000e62:	f107 0320 	add.w	r3, r7, #32
 8000e66:	220b      	movs	r2, #11
 8000e68:	4619      	mov	r1, r3
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff fd5e 	bl	800092c <UARTTxWrite>

				break;
 8000e70:	bf00      	nop
 8000e72:	e025      	b.n	8000ec0 <DynamixelProtocal2+0x504>
			}
			}
		}
		else //crc error
		{
			uint8_t temp[] =
 8000e74:	4a22      	ldr	r2, [pc, #136]	; (8000f00 <DynamixelProtocal2+0x544>)
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e7c:	c303      	stmia	r3!, {r0, r1}
 8000e7e:	801a      	strh	r2, [r3, #0]
 8000e80:	3302      	adds	r3, #2
 8000e82:	0c12      	lsrs	r2, r2, #16
 8000e84:	701a      	strb	r2, [r3, #0]
			{ 0xff, 0xff, 0xfd, 0x00, 0x00, 0x05, 0x00, 0x55, 0x03, 0x00, 0x00 };
			temp[4] = MotorID;
 8000e86:	7afb      	ldrb	r3, [r7, #11]
 8000e88:	763b      	strb	r3, [r7, #24]
			uint16_t crc_calc = update_crc(0, temp, 9);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	2209      	movs	r2, #9
 8000e90:	4619      	mov	r1, r3
 8000e92:	2000      	movs	r0, #0
 8000e94:	f000 f838 	bl	8000f08 <update_crc>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			temp[9] = crc_calc & 0xff;
 8000e9e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	777b      	strb	r3, [r7, #29]
			temp[10] = (crc_calc >> 8) & 0xFF;
 8000ea6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000eaa:	0a1b      	lsrs	r3, r3, #8
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	77bb      	strb	r3, [r7, #30]
			UARTTxWrite(uart, temp, 11);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	220b      	movs	r2, #11
 8000eb8:	4619      	mov	r1, r3
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff fd36 	bl	800092c <UARTTxWrite>
		}
		State = DNMXP_idle;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <DynamixelProtocal2+0x548>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
		break;
 8000ec6:	e004      	b.n	8000ed2 <DynamixelProtocal2+0x516>
		break;
 8000ec8:	bf00      	nop
 8000eca:	e002      	b.n	8000ed2 <DynamixelProtocal2+0x516>
		break;
 8000ecc:	bf00      	nop
 8000ece:	e000      	b.n	8000ed2 <DynamixelProtocal2+0x516>
		break;
 8000ed0:	bf00      	nop
	}

}
 8000ed2:	bf00      	nop
 8000ed4:	3768      	adds	r7, #104	; 0x68
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200002b2 	.word	0x200002b2
 8000ee0:	200002b0 	.word	0x200002b0
 8000ee4:	200002ae 	.word	0x200002ae
 8000ee8:	200001a8 	.word	0x200001a8
 8000eec:	08003a64 	.word	0x08003a64
 8000ef0:	200001ac 	.word	0x200001ac
 8000ef4:	08003a70 	.word	0x08003a70
 8000ef8:	200002ac 	.word	0x200002ac
 8000efc:	08003a7c 	.word	0x08003a7c
 8000f00:	08003a88 	.word	0x08003a88
 8000f04:	200001a4 	.word	0x200001a4

08000f08 <update_crc>:
unsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr,
		unsigned short data_blk_size)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	463b      	mov	r3, r7
 8000f12:	6019      	str	r1, [r3, #0]
 8000f14:	4611      	mov	r1, r2
 8000f16:	1dbb      	adds	r3, r7, #6
 8000f18:	4602      	mov	r2, r0
 8000f1a:	801a      	strh	r2, [r3, #0]
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	460a      	mov	r2, r1
 8000f20:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] =
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	4a1e      	ldr	r2, [pc, #120]	; (8000fa0 <update_crc+0x98>)
 8000f28:	4618      	mov	r0, r3
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f30:	461a      	mov	r2, r3
 8000f32:	f002 fcfd 	bl	8003930 <memcpy>
			0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252, 0x0270,
			0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220,
			0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231, 0x8213,
			0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202 };

	for (j = 0; j < data_blk_size; j++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000f3c:	e023      	b.n	8000f86 <update_crc+0x7e>
	{
		i = ((unsigned short) (crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8000f3e:	1dbb      	adds	r3, r7, #6
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	0a1b      	lsrs	r3, r3, #8
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000f4a:	4639      	mov	r1, r7
 8000f4c:	6809      	ldr	r1, [r1, #0]
 8000f4e:	440b      	add	r3, r1
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	4053      	eors	r3, r2
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000f5e:	1dbb      	adds	r3, r7, #6
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	b21a      	sxth	r2, r3
 8000f66:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000f72:	b21b      	sxth	r3, r3
 8000f74:	4053      	eors	r3, r2
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	1dbb      	adds	r3, r7, #6
 8000f7a:	801a      	strh	r2, [r3, #0]
	for (j = 0; j < data_blk_size; j++)
 8000f7c:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000f80:	3301      	adds	r3, #1
 8000f82:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d3d5      	bcc.n	8000f3e <update_crc+0x36>
	}

	return crc_accum;
 8000f92:	1dbb      	adds	r3, r7, #6
 8000f94:	881b      	ldrh	r3, [r3, #0]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	08003a94 	.word	0x08003a94

08000fa4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000faa:	e7fe      	b.n	8000faa <Error_Handler+0x6>

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a0f      	ldr	r2, [pc, #60]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_MspInit+0x4c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fea:	2007      	movs	r0, #7
 8000fec:	f000 fabc 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800

08000ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a4c      	ldr	r2, [pc, #304]	; (800114c <HAL_UART_MspInit+0x150>)
 800101a:	4293      	cmp	r3, r2
 800101c:	f040 8091 	bne.w	8001142 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	4b4a      	ldr	r3, [pc, #296]	; (8001150 <HAL_UART_MspInit+0x154>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	4a49      	ldr	r2, [pc, #292]	; (8001150 <HAL_UART_MspInit+0x154>)
 800102a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102e:	6413      	str	r3, [r2, #64]	; 0x40
 8001030:	4b47      	ldr	r3, [pc, #284]	; (8001150 <HAL_UART_MspInit+0x154>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	4b43      	ldr	r3, [pc, #268]	; (8001150 <HAL_UART_MspInit+0x154>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	4a42      	ldr	r2, [pc, #264]	; (8001150 <HAL_UART_MspInit+0x154>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6313      	str	r3, [r2, #48]	; 0x30
 800104c:	4b40      	ldr	r3, [pc, #256]	; (8001150 <HAL_UART_MspInit+0x154>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001058:	230c      	movs	r3, #12
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001068:	2307      	movs	r3, #7
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4838      	ldr	r0, [pc, #224]	; (8001154 <HAL_UART_MspInit+0x158>)
 8001074:	f000 fe4a 	bl	8001d0c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001078:	4b37      	ldr	r3, [pc, #220]	; (8001158 <HAL_UART_MspInit+0x15c>)
 800107a:	4a38      	ldr	r2, [pc, #224]	; (800115c <HAL_UART_MspInit+0x160>)
 800107c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800107e:	4b36      	ldr	r3, [pc, #216]	; (8001158 <HAL_UART_MspInit+0x15c>)
 8001080:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001084:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001086:	4b34      	ldr	r3, [pc, #208]	; (8001158 <HAL_UART_MspInit+0x15c>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800108c:	4b32      	ldr	r3, [pc, #200]	; (8001158 <HAL_UART_MspInit+0x15c>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001092:	4b31      	ldr	r3, [pc, #196]	; (8001158 <HAL_UART_MspInit+0x15c>)
 8001094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001098:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800109a:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <HAL_UART_MspInit+0x15c>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a0:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <HAL_UART_MspInit+0x15c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80010a6:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <HAL_UART_MspInit+0x15c>)
 80010a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <HAL_UART_MspInit+0x15c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b4:	4b28      	ldr	r3, [pc, #160]	; (8001158 <HAL_UART_MspInit+0x15c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010ba:	4827      	ldr	r0, [pc, #156]	; (8001158 <HAL_UART_MspInit+0x15c>)
 80010bc:	f000 fa96 	bl	80015ec <HAL_DMA_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80010c6:	f7ff ff6d 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a22      	ldr	r2, [pc, #136]	; (8001158 <HAL_UART_MspInit+0x15c>)
 80010ce:	635a      	str	r2, [r3, #52]	; 0x34
 80010d0:	4a21      	ldr	r2, [pc, #132]	; (8001158 <HAL_UART_MspInit+0x15c>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80010d6:	4b22      	ldr	r3, [pc, #136]	; (8001160 <HAL_UART_MspInit+0x164>)
 80010d8:	4a22      	ldr	r2, [pc, #136]	; (8001164 <HAL_UART_MspInit+0x168>)
 80010da:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80010dc:	4b20      	ldr	r3, [pc, #128]	; (8001160 <HAL_UART_MspInit+0x164>)
 80010de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010e2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010e4:	4b1e      	ldr	r3, [pc, #120]	; (8001160 <HAL_UART_MspInit+0x164>)
 80010e6:	2240      	movs	r2, #64	; 0x40
 80010e8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <HAL_UART_MspInit+0x164>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <HAL_UART_MspInit+0x164>)
 80010f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_UART_MspInit+0x164>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_UART_MspInit+0x164>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <HAL_UART_MspInit+0x164>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_UART_MspInit+0x164>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <HAL_UART_MspInit+0x164>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001116:	4812      	ldr	r0, [pc, #72]	; (8001160 <HAL_UART_MspInit+0x164>)
 8001118:	f000 fa68 	bl	80015ec <HAL_DMA_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001122:	f7ff ff3f 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <HAL_UART_MspInit+0x164>)
 800112a:	631a      	str	r2, [r3, #48]	; 0x30
 800112c:	4a0c      	ldr	r2, [pc, #48]	; (8001160 <HAL_UART_MspInit+0x164>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	2026      	movs	r0, #38	; 0x26
 8001138:	f000 fa21 	bl	800157e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800113c:	2026      	movs	r0, #38	; 0x26
 800113e:	f000 fa3a 	bl	80015b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40004400 	.word	0x40004400
 8001150:	40023800 	.word	0x40023800
 8001154:	40020000 	.word	0x40020000
 8001158:	200002c0 	.word	0x200002c0
 800115c:	40026088 	.word	0x40026088
 8001160:	20000320 	.word	0x20000320
 8001164:	400260a0 	.word	0x400260a0

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800116c:	e7fe      	b.n	800116c <NMI_Handler+0x4>

0800116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler+0x4>

0800117a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <BusFault_Handler+0x4>

08001180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <UsageFault_Handler+0x4>

08001186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b4:	f000 f8e8 	bl	8001388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}

080011bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <DMA1_Stream5_IRQHandler+0x10>)
 80011c2:	f000 fb3b 	bl	800183c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200002c0 	.word	0x200002c0

080011d0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <DMA1_Stream6_IRQHandler+0x10>)
 80011d6:	f000 fb31 	bl	800183c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000320 	.word	0x20000320

080011e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <USART2_IRQHandler+0x10>)
 80011ea:	f001 fcc7 	bl	8002b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000380 	.word	0x20000380

080011f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001200:	4a14      	ldr	r2, [pc, #80]	; (8001254 <_sbrk+0x5c>)
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <_sbrk+0x60>)
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <_sbrk+0x64>)
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <_sbrk+0x68>)
 8001218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	429a      	cmp	r2, r3
 8001226:	d207      	bcs.n	8001238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001228:	f002 fb58 	bl	80038dc <__errno>
 800122c:	4602      	mov	r2, r0
 800122e:	230c      	movs	r3, #12
 8001230:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	e009      	b.n	800124c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	4a05      	ldr	r2, [pc, #20]	; (800125c <_sbrk+0x64>)
 8001248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124a:	68fb      	ldr	r3, [r7, #12]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20020000 	.word	0x20020000
 8001258:	00000400 	.word	0x00000400
 800125c:	200002b4 	.word	0x200002b4
 8001260:	200003c8 	.word	0x200003c8

08001264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <SystemInit+0x28>)
 800126a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800126e:	4a07      	ldr	r2, [pc, #28]	; (800128c <SystemInit+0x28>)
 8001270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <SystemInit+0x28>)
 800127a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800127e:	609a      	str	r2, [r3, #8]
#endif
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001294:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001296:	e003      	b.n	80012a0 <LoopCopyDataInit>

08001298 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800129a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800129c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800129e:	3104      	adds	r1, #4

080012a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012a0:	480b      	ldr	r0, [pc, #44]	; (80012d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012a8:	d3f6      	bcc.n	8001298 <CopyDataInit>
  ldr  r2, =_sbss
 80012aa:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012ac:	e002      	b.n	80012b4 <LoopFillZerobss>

080012ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012b0:	f842 3b04 	str.w	r3, [r2], #4

080012b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012b8:	d3f9      	bcc.n	80012ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012ba:	f7ff ffd3 	bl	8001264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012be:	f002 fb13 	bl	80038e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c2:	f7ff f909 	bl	80004d8 <main>
  bx  lr    
 80012c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012cc:	08003cc4 	.word	0x08003cc4
  ldr  r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012d4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80012d8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80012dc:	200003c8 	.word	0x200003c8

080012e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC_IRQHandler>
	...

080012e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_Init+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0d      	ldr	r2, [pc, #52]	; (8001324 <HAL_Init+0x40>)
 80012ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_Init+0x40>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <HAL_Init+0x40>)
 80012fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_Init+0x40>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <HAL_Init+0x40>)
 8001306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130c:	2003      	movs	r0, #3
 800130e:	f000 f92b 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001312:	2000      	movs	r0, #0
 8001314:	f000 f808 	bl	8001328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001318:	f7ff fe48 	bl	8000fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023c00 	.word	0x40023c00

08001328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x54>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_InitTick+0x58>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001342:	fbb2 f3f3 	udiv	r3, r2, r3
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f943 	bl	80015d2 <HAL_SYSTICK_Config>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e00e      	b.n	8001374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2b0f      	cmp	r3, #15
 800135a:	d80a      	bhi.n	8001372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800135c:	2200      	movs	r2, #0
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f000 f90b 	bl	800157e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001368:	4a06      	ldr	r2, [pc, #24]	; (8001384 <HAL_InitTick+0x5c>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	e000      	b.n	8001374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000000 	.word	0x20000000
 8001380:	20000008 	.word	0x20000008
 8001384:	20000004 	.word	0x20000004

08001388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x20>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_IncTick+0x24>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4413      	add	r3, r2
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <HAL_IncTick+0x24>)
 800139a:	6013      	str	r3, [r2, #0]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000008 	.word	0x20000008
 80013ac:	200003c0 	.word	0x200003c0

080013b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return uwTick;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <HAL_GetTick+0x14>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	200003c0 	.word	0x200003c0

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db0b      	blt.n	8001456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	4907      	ldr	r1, [pc, #28]	; (8001464 <__NVIC_EnableIRQ+0x38>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100

08001468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db0a      	blt.n	8001492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	; (80014b4 <__NVIC_SetPriority+0x4c>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	440b      	add	r3, r1
 800148c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001490:	e00a      	b.n	80014a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4908      	ldr	r1, [pc, #32]	; (80014b8 <__NVIC_SetPriority+0x50>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	0112      	lsls	r2, r2, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	761a      	strb	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001534:	d301      	bcc.n	800153a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001536:	2301      	movs	r3, #1
 8001538:	e00f      	b.n	800155a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <SysTick_Config+0x40>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001542:	210f      	movs	r1, #15
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f7ff ff8e 	bl	8001468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SysTick_Config+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SysTick_Config+0x40>)
 8001554:	2207      	movs	r2, #7
 8001556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000e010 	.word	0xe000e010

08001568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff29 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff3e 	bl	8001410 <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff8e 	bl	80014bc <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5d 	bl	8001468 <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff31 	bl	800142c <__NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffa2 	bl	8001524 <SysTick_Config>
 80015e0:	4603      	mov	r3, r0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff feda 	bl	80013b0 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e099      	b.n	800173c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2202      	movs	r2, #2
 8001614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001628:	e00f      	b.n	800164a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800162a:	f7ff fec1 	bl	80013b0 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b05      	cmp	r3, #5
 8001636:	d908      	bls.n	800164a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2220      	movs	r2, #32
 800163c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2203      	movs	r2, #3
 8001642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e078      	b.n	800173c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1e8      	bne.n	800162a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_DMA_Init+0x158>)
 8001664:	4013      	ands	r3, r2
 8001666:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001676:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001682:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800168e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4313      	orrs	r3, r2
 800169a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d107      	bne.n	80016b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	4313      	orrs	r3, r2
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f023 0307 	bic.w	r3, r3, #7
 80016ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d117      	bne.n	800170e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00e      	beq.n	800170e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 fa91 	bl	8001c18 <DMA_CheckFifoParam>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800170a:	2301      	movs	r3, #1
 800170c:	e016      	b.n	800173c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 fa48 	bl	8001bac <DMA_CalcBaseAndBitshift>
 800171c:	4603      	mov	r3, r0
 800171e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001724:	223f      	movs	r2, #63	; 0x3f
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	f010803f 	.word	0xf010803f

08001748 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_DMA_Start_IT+0x26>
 800176a:	2302      	movs	r3, #2
 800176c:	e040      	b.n	80017f0 <HAL_DMA_Start_IT+0xa8>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b01      	cmp	r3, #1
 8001780:	d12f      	bne.n	80017e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2202      	movs	r2, #2
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 f9da 	bl	8001b50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	223f      	movs	r2, #63	; 0x3f
 80017a2:	409a      	lsls	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0216 	orr.w	r2, r2, #22
 80017b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f042 0208 	orr.w	r2, r2, #8
 80017ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	e005      	b.n	80017ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017ea:	2302      	movs	r3, #2
 80017ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d004      	beq.n	8001816 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2280      	movs	r2, #128	; 0x80
 8001810:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e00c      	b.n	8001830 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2205      	movs	r2, #5
 800181a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0201 	bic.w	r2, r2, #1
 800182c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001848:	4b92      	ldr	r3, [pc, #584]	; (8001a94 <HAL_DMA_IRQHandler+0x258>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a92      	ldr	r2, [pc, #584]	; (8001a98 <HAL_DMA_IRQHandler+0x25c>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	0a9b      	lsrs	r3, r3, #10
 8001854:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001866:	2208      	movs	r2, #8
 8001868:	409a      	lsls	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d01a      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0204 	bic.w	r2, r2, #4
 800188e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001894:	2208      	movs	r2, #8
 8001896:	409a      	lsls	r2, r3
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a0:	f043 0201 	orr.w	r2, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ac:	2201      	movs	r2, #1
 80018ae:	409a      	lsls	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4013      	ands	r3, r2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d012      	beq.n	80018de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00b      	beq.n	80018de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ca:	2201      	movs	r2, #1
 80018cc:	409a      	lsls	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d6:	f043 0202 	orr.w	r2, r3, #2
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e2:	2204      	movs	r2, #4
 80018e4:	409a      	lsls	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d012      	beq.n	8001914 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d00b      	beq.n	8001914 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001900:	2204      	movs	r2, #4
 8001902:	409a      	lsls	r2, r3
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190c:	f043 0204 	orr.w	r2, r3, #4
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001918:	2210      	movs	r2, #16
 800191a:	409a      	lsls	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d043      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d03c      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001936:	2210      	movs	r2, #16
 8001938:	409a      	lsls	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d018      	beq.n	800197e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d108      	bne.n	800196c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	2b00      	cmp	r3, #0
 8001960:	d024      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	4798      	blx	r3
 800196a:	e01f      	b.n	80019ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001970:	2b00      	cmp	r3, #0
 8001972:	d01b      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	4798      	blx	r3
 800197c:	e016      	b.n	80019ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d107      	bne.n	800199c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0208 	bic.w	r2, r2, #8
 800199a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b0:	2220      	movs	r2, #32
 80019b2:	409a      	lsls	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 808e 	beq.w	8001ada <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 8086 	beq.w	8001ada <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d2:	2220      	movs	r2, #32
 80019d4:	409a      	lsls	r2, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	d136      	bne.n	8001a54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0216 	bic.w	r2, r2, #22
 80019f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d103      	bne.n	8001a16 <HAL_DMA_IRQHandler+0x1da>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0208 	bic.w	r2, r2, #8
 8001a24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	223f      	movs	r2, #63	; 0x3f
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d07d      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
        }
        return;
 8001a52:	e078      	b.n	8001b46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d01c      	beq.n	8001a9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d108      	bne.n	8001a82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d030      	beq.n	8001ada <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	4798      	blx	r3
 8001a80:	e02b      	b.n	8001ada <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d027      	beq.n	8001ada <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	4798      	blx	r3
 8001a92:	e022      	b.n	8001ada <HAL_DMA_IRQHandler+0x29e>
 8001a94:	20000000 	.word	0x20000000
 8001a98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10f      	bne.n	8001aca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 0210 	bic.w	r2, r2, #16
 8001ab8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d032      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d022      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2205      	movs	r2, #5
 8001af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0201 	bic.w	r2, r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d307      	bcc.n	8001b22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f2      	bne.n	8001b06 <HAL_DMA_IRQHandler+0x2ca>
 8001b20:	e000      	b.n	8001b24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	4798      	blx	r3
 8001b44:	e000      	b.n	8001b48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b46:	bf00      	nop
    }
  }
}
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop

08001b50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b40      	cmp	r3, #64	; 0x40
 8001b7c:	d108      	bne.n	8001b90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b8e:	e007      	b.n	8001ba0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	60da      	str	r2, [r3, #12]
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	3b10      	subs	r3, #16
 8001bbc:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <DMA_CalcBaseAndBitshift+0x64>)
 8001bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc2:	091b      	lsrs	r3, r3, #4
 8001bc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bc6:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <DMA_CalcBaseAndBitshift+0x68>)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d909      	bls.n	8001bee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001be2:	f023 0303 	bic.w	r3, r3, #3
 8001be6:	1d1a      	adds	r2, r3, #4
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	659a      	str	r2, [r3, #88]	; 0x58
 8001bec:	e007      	b.n	8001bfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bf6:	f023 0303 	bic.w	r3, r3, #3
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	aaaaaaab 	.word	0xaaaaaaab
 8001c14:	08003cac 	.word	0x08003cac

08001c18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d11f      	bne.n	8001c72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	d855      	bhi.n	8001ce4 <DMA_CheckFifoParam+0xcc>
 8001c38:	a201      	add	r2, pc, #4	; (adr r2, 8001c40 <DMA_CheckFifoParam+0x28>)
 8001c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3e:	bf00      	nop
 8001c40:	08001c51 	.word	0x08001c51
 8001c44:	08001c63 	.word	0x08001c63
 8001c48:	08001c51 	.word	0x08001c51
 8001c4c:	08001ce5 	.word	0x08001ce5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d045      	beq.n	8001ce8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c60:	e042      	b.n	8001ce8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c6a:	d13f      	bne.n	8001cec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c70:	e03c      	b.n	8001cec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c7a:	d121      	bne.n	8001cc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d836      	bhi.n	8001cf0 <DMA_CheckFifoParam+0xd8>
 8001c82:	a201      	add	r2, pc, #4	; (adr r2, 8001c88 <DMA_CheckFifoParam+0x70>)
 8001c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c88:	08001c99 	.word	0x08001c99
 8001c8c:	08001c9f 	.word	0x08001c9f
 8001c90:	08001c99 	.word	0x08001c99
 8001c94:	08001cb1 	.word	0x08001cb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c9c:	e02f      	b.n	8001cfe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d024      	beq.n	8001cf4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cae:	e021      	b.n	8001cf4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cb8:	d11e      	bne.n	8001cf8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cbe:	e01b      	b.n	8001cf8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d902      	bls.n	8001ccc <DMA_CheckFifoParam+0xb4>
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d003      	beq.n	8001cd2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cca:	e018      	b.n	8001cfe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
      break;
 8001cd0:	e015      	b.n	8001cfe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00e      	beq.n	8001cfc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ce2:	e00b      	b.n	8001cfc <DMA_CheckFifoParam+0xe4>
      break;
 8001ce4:	bf00      	nop
 8001ce6:	e00a      	b.n	8001cfe <DMA_CheckFifoParam+0xe6>
      break;
 8001ce8:	bf00      	nop
 8001cea:	e008      	b.n	8001cfe <DMA_CheckFifoParam+0xe6>
      break;
 8001cec:	bf00      	nop
 8001cee:	e006      	b.n	8001cfe <DMA_CheckFifoParam+0xe6>
      break;
 8001cf0:	bf00      	nop
 8001cf2:	e004      	b.n	8001cfe <DMA_CheckFifoParam+0xe6>
      break;
 8001cf4:	bf00      	nop
 8001cf6:	e002      	b.n	8001cfe <DMA_CheckFifoParam+0xe6>
      break;   
 8001cf8:	bf00      	nop
 8001cfa:	e000      	b.n	8001cfe <DMA_CheckFifoParam+0xe6>
      break;
 8001cfc:	bf00      	nop
    }
  } 
  
  return status; 
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	; 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	e159      	b.n	8001fdc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d28:	2201      	movs	r2, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	f040 8148 	bne.w	8001fd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d00b      	beq.n	8001d66 <HAL_GPIO_Init+0x5a>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d007      	beq.n	8001d66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d5a:	2b11      	cmp	r3, #17
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b12      	cmp	r3, #18
 8001d64:	d130      	bne.n	8001dc8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	2203      	movs	r2, #3
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 0201 	and.w	r2, r3, #1
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0xfc>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b12      	cmp	r3, #18
 8001e06:	d123      	bne.n	8001e50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	08da      	lsrs	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3208      	adds	r2, #8
 8001e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	08da      	lsrs	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3208      	adds	r2, #8
 8001e4a:	69b9      	ldr	r1, [r7, #24]
 8001e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0203 	and.w	r2, r3, #3
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80a2 	beq.w	8001fd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b56      	ldr	r3, [pc, #344]	; (8001ff0 <HAL_GPIO_Init+0x2e4>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	4a55      	ldr	r2, [pc, #340]	; (8001ff0 <HAL_GPIO_Init+0x2e4>)
 8001e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea2:	4b53      	ldr	r3, [pc, #332]	; (8001ff0 <HAL_GPIO_Init+0x2e4>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eae:	4a51      	ldr	r2, [pc, #324]	; (8001ff4 <HAL_GPIO_Init+0x2e8>)
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a48      	ldr	r2, [pc, #288]	; (8001ff8 <HAL_GPIO_Init+0x2ec>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d019      	beq.n	8001f0e <HAL_GPIO_Init+0x202>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a47      	ldr	r2, [pc, #284]	; (8001ffc <HAL_GPIO_Init+0x2f0>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d013      	beq.n	8001f0a <HAL_GPIO_Init+0x1fe>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a46      	ldr	r2, [pc, #280]	; (8002000 <HAL_GPIO_Init+0x2f4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00d      	beq.n	8001f06 <HAL_GPIO_Init+0x1fa>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a45      	ldr	r2, [pc, #276]	; (8002004 <HAL_GPIO_Init+0x2f8>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d007      	beq.n	8001f02 <HAL_GPIO_Init+0x1f6>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a44      	ldr	r2, [pc, #272]	; (8002008 <HAL_GPIO_Init+0x2fc>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d101      	bne.n	8001efe <HAL_GPIO_Init+0x1f2>
 8001efa:	2304      	movs	r3, #4
 8001efc:	e008      	b.n	8001f10 <HAL_GPIO_Init+0x204>
 8001efe:	2307      	movs	r3, #7
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x204>
 8001f02:	2303      	movs	r3, #3
 8001f04:	e004      	b.n	8001f10 <HAL_GPIO_Init+0x204>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e002      	b.n	8001f10 <HAL_GPIO_Init+0x204>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_GPIO_Init+0x204>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	f002 0203 	and.w	r2, r2, #3
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	4093      	lsls	r3, r2
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f20:	4934      	ldr	r1, [pc, #208]	; (8001ff4 <HAL_GPIO_Init+0x2e8>)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3302      	adds	r3, #2
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f2e:	4b37      	ldr	r3, [pc, #220]	; (800200c <HAL_GPIO_Init+0x300>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f52:	4a2e      	ldr	r2, [pc, #184]	; (800200c <HAL_GPIO_Init+0x300>)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f58:	4b2c      	ldr	r3, [pc, #176]	; (800200c <HAL_GPIO_Init+0x300>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f7c:	4a23      	ldr	r2, [pc, #140]	; (800200c <HAL_GPIO_Init+0x300>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f82:	4b22      	ldr	r3, [pc, #136]	; (800200c <HAL_GPIO_Init+0x300>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fa6:	4a19      	ldr	r2, [pc, #100]	; (800200c <HAL_GPIO_Init+0x300>)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_GPIO_Init+0x300>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd0:	4a0e      	ldr	r2, [pc, #56]	; (800200c <HAL_GPIO_Init+0x300>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	2b0f      	cmp	r3, #15
 8001fe0:	f67f aea2 	bls.w	8001d28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3724      	adds	r7, #36	; 0x24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40013800 	.word	0x40013800
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	40020400 	.word	0x40020400
 8002000:	40020800 	.word	0x40020800
 8002004:	40020c00 	.word	0x40020c00
 8002008:	40021000 	.word	0x40021000
 800200c:	40013c00 	.word	0x40013c00

08002010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
 800201c:	4613      	mov	r3, r2
 800201e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002020:	787b      	ldrb	r3, [r7, #1]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800202c:	e003      	b.n	8002036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800202e:	887b      	ldrh	r3, [r7, #2]
 8002030:	041a      	lsls	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	619a      	str	r2, [r3, #24]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e25b      	b.n	800250e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d075      	beq.n	800214e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002062:	4ba3      	ldr	r3, [pc, #652]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b04      	cmp	r3, #4
 800206c:	d00c      	beq.n	8002088 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206e:	4ba0      	ldr	r3, [pc, #640]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002076:	2b08      	cmp	r3, #8
 8002078:	d112      	bne.n	80020a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800207a:	4b9d      	ldr	r3, [pc, #628]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002086:	d10b      	bne.n	80020a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002088:	4b99      	ldr	r3, [pc, #612]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d05b      	beq.n	800214c <HAL_RCC_OscConfig+0x108>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d157      	bne.n	800214c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e236      	b.n	800250e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a8:	d106      	bne.n	80020b8 <HAL_RCC_OscConfig+0x74>
 80020aa:	4b91      	ldr	r3, [pc, #580]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a90      	ldr	r2, [pc, #576]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e01d      	b.n	80020f4 <HAL_RCC_OscConfig+0xb0>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x98>
 80020c2:	4b8b      	ldr	r3, [pc, #556]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a8a      	ldr	r2, [pc, #552]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80020c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4b88      	ldr	r3, [pc, #544]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a87      	ldr	r2, [pc, #540]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0xb0>
 80020dc:	4b84      	ldr	r3, [pc, #528]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a83      	ldr	r2, [pc, #524]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80020e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	4b81      	ldr	r3, [pc, #516]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a80      	ldr	r2, [pc, #512]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80020ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d013      	beq.n	8002124 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fc:	f7ff f958 	bl	80013b0 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002104:	f7ff f954 	bl	80013b0 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	; 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e1fb      	b.n	800250e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002116:	4b76      	ldr	r3, [pc, #472]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0xc0>
 8002122:	e014      	b.n	800214e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7ff f944 	bl	80013b0 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800212c:	f7ff f940 	bl	80013b0 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	; 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e1e7      	b.n	800250e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213e:	4b6c      	ldr	r3, [pc, #432]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0xe8>
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d063      	beq.n	8002222 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800215a:	4b65      	ldr	r3, [pc, #404]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002166:	4b62      	ldr	r3, [pc, #392]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800216e:	2b08      	cmp	r3, #8
 8002170:	d11c      	bne.n	80021ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002172:	4b5f      	ldr	r3, [pc, #380]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d116      	bne.n	80021ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217e:	4b5c      	ldr	r3, [pc, #368]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <HAL_RCC_OscConfig+0x152>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d001      	beq.n	8002196 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e1bb      	b.n	800250e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002196:	4b56      	ldr	r3, [pc, #344]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4952      	ldr	r1, [pc, #328]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021aa:	e03a      	b.n	8002222 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d020      	beq.n	80021f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b4:	4b4f      	ldr	r3, [pc, #316]	; (80022f4 <HAL_RCC_OscConfig+0x2b0>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ba:	f7ff f8f9 	bl	80013b0 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c2:	f7ff f8f5 	bl	80013b0 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e19c      	b.n	800250e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d4:	4b46      	ldr	r3, [pc, #280]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e0:	4b43      	ldr	r3, [pc, #268]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	4940      	ldr	r1, [pc, #256]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]
 80021f4:	e015      	b.n	8002222 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f6:	4b3f      	ldr	r3, [pc, #252]	; (80022f4 <HAL_RCC_OscConfig+0x2b0>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7ff f8d8 	bl	80013b0 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002204:	f7ff f8d4 	bl	80013b0 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e17b      	b.n	800250e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002216:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d030      	beq.n	8002290 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d016      	beq.n	8002264 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002236:	4b30      	ldr	r3, [pc, #192]	; (80022f8 <HAL_RCC_OscConfig+0x2b4>)
 8002238:	2201      	movs	r2, #1
 800223a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223c:	f7ff f8b8 	bl	80013b0 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002244:	f7ff f8b4 	bl	80013b0 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e15b      	b.n	800250e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002256:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 8002258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0x200>
 8002262:	e015      	b.n	8002290 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002264:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <HAL_RCC_OscConfig+0x2b4>)
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226a:	f7ff f8a1 	bl	80013b0 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002272:	f7ff f89d 	bl	80013b0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e144      	b.n	800250e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 8002286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f0      	bne.n	8002272 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80a0 	beq.w	80023de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a2:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022bc:	6413      	str	r3, [r2, #64]	; 0x40
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <HAL_RCC_OscConfig+0x2ac>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ca:	2301      	movs	r3, #1
 80022cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_RCC_OscConfig+0x2b8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d121      	bne.n	800231e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_RCC_OscConfig+0x2b8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a07      	ldr	r2, [pc, #28]	; (80022fc <HAL_RCC_OscConfig+0x2b8>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e6:	f7ff f863 	bl	80013b0 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ec:	e011      	b.n	8002312 <HAL_RCC_OscConfig+0x2ce>
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800
 80022f4:	42470000 	.word	0x42470000
 80022f8:	42470e80 	.word	0x42470e80
 80022fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002300:	f7ff f856 	bl	80013b0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0fd      	b.n	800250e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002312:	4b81      	ldr	r3, [pc, #516]	; (8002518 <HAL_RCC_OscConfig+0x4d4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d106      	bne.n	8002334 <HAL_RCC_OscConfig+0x2f0>
 8002326:	4b7d      	ldr	r3, [pc, #500]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232a:	4a7c      	ldr	r2, [pc, #496]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6713      	str	r3, [r2, #112]	; 0x70
 8002332:	e01c      	b.n	800236e <HAL_RCC_OscConfig+0x32a>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b05      	cmp	r3, #5
 800233a:	d10c      	bne.n	8002356 <HAL_RCC_OscConfig+0x312>
 800233c:	4b77      	ldr	r3, [pc, #476]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 800233e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002340:	4a76      	ldr	r2, [pc, #472]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 8002342:	f043 0304 	orr.w	r3, r3, #4
 8002346:	6713      	str	r3, [r2, #112]	; 0x70
 8002348:	4b74      	ldr	r3, [pc, #464]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 800234a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234c:	4a73      	ldr	r2, [pc, #460]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6713      	str	r3, [r2, #112]	; 0x70
 8002354:	e00b      	b.n	800236e <HAL_RCC_OscConfig+0x32a>
 8002356:	4b71      	ldr	r3, [pc, #452]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	4a70      	ldr	r2, [pc, #448]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 800235c:	f023 0301 	bic.w	r3, r3, #1
 8002360:	6713      	str	r3, [r2, #112]	; 0x70
 8002362:	4b6e      	ldr	r3, [pc, #440]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002366:	4a6d      	ldr	r2, [pc, #436]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 8002368:	f023 0304 	bic.w	r3, r3, #4
 800236c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d015      	beq.n	80023a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002376:	f7ff f81b 	bl	80013b0 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237c:	e00a      	b.n	8002394 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800237e:	f7ff f817 	bl	80013b0 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f241 3288 	movw	r2, #5000	; 0x1388
 800238c:	4293      	cmp	r3, r2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e0bc      	b.n	800250e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002394:	4b61      	ldr	r3, [pc, #388]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ee      	beq.n	800237e <HAL_RCC_OscConfig+0x33a>
 80023a0:	e014      	b.n	80023cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a2:	f7ff f805 	bl	80013b0 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a8:	e00a      	b.n	80023c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023aa:	f7ff f801 	bl	80013b0 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0a6      	b.n	800250e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c0:	4b56      	ldr	r3, [pc, #344]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 80023c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1ee      	bne.n	80023aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d105      	bne.n	80023de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d2:	4b52      	ldr	r3, [pc, #328]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a51      	ldr	r2, [pc, #324]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 80023d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8092 	beq.w	800250c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023e8:	4b4c      	ldr	r3, [pc, #304]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 030c 	and.w	r3, r3, #12
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d05c      	beq.n	80024ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d141      	bne.n	8002480 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fc:	4b48      	ldr	r3, [pc, #288]	; (8002520 <HAL_RCC_OscConfig+0x4dc>)
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002402:	f7fe ffd5 	bl	80013b0 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240a:	f7fe ffd1 	bl	80013b0 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e078      	b.n	800250e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241c:	4b3f      	ldr	r3, [pc, #252]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1f0      	bne.n	800240a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69da      	ldr	r2, [r3, #28]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	019b      	lsls	r3, r3, #6
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	085b      	lsrs	r3, r3, #1
 8002440:	3b01      	subs	r3, #1
 8002442:	041b      	lsls	r3, r3, #16
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	061b      	lsls	r3, r3, #24
 800244c:	4933      	ldr	r1, [pc, #204]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002452:	4b33      	ldr	r3, [pc, #204]	; (8002520 <HAL_RCC_OscConfig+0x4dc>)
 8002454:	2201      	movs	r2, #1
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe ffaa 	bl	80013b0 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002460:	f7fe ffa6 	bl	80013b0 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e04d      	b.n	800250e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002472:	4b2a      	ldr	r3, [pc, #168]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0x41c>
 800247e:	e045      	b.n	800250c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002480:	4b27      	ldr	r3, [pc, #156]	; (8002520 <HAL_RCC_OscConfig+0x4dc>)
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002486:	f7fe ff93 	bl	80013b0 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248e:	f7fe ff8f 	bl	80013b0 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e036      	b.n	800250e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a0:	4b1e      	ldr	r3, [pc, #120]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f0      	bne.n	800248e <HAL_RCC_OscConfig+0x44a>
 80024ac:	e02e      	b.n	800250c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e029      	b.n	800250e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_RCC_OscConfig+0x4d8>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d11c      	bne.n	8002508 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d115      	bne.n	8002508 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024e2:	4013      	ands	r3, r2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d10d      	bne.n	8002508 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d106      	bne.n	8002508 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40007000 	.word	0x40007000
 800251c:	40023800 	.word	0x40023800
 8002520:	42470060 	.word	0x42470060

08002524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0cc      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002538:	4b68      	ldr	r3, [pc, #416]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d90c      	bls.n	8002560 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b65      	ldr	r3, [pc, #404]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b63      	ldr	r3, [pc, #396]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0b8      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002578:	4b59      	ldr	r3, [pc, #356]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a58      	ldr	r2, [pc, #352]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002582:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002590:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4a52      	ldr	r2, [pc, #328]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800259a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800259c:	4b50      	ldr	r3, [pc, #320]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	494d      	ldr	r1, [pc, #308]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d044      	beq.n	8002644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d119      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e07f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d003      	beq.n	80025e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e2:	4b3f      	ldr	r3, [pc, #252]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e06f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f2:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e067      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002602:	4b37      	ldr	r3, [pc, #220]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f023 0203 	bic.w	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4934      	ldr	r1, [pc, #208]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	4313      	orrs	r3, r2
 8002612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002614:	f7fe fecc 	bl	80013b0 <HAL_GetTick>
 8002618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	e00a      	b.n	8002632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800261c:	f7fe fec8 	bl	80013b0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	; 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e04f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002632:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 020c 	and.w	r2, r3, #12
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	429a      	cmp	r2, r3
 8002642:	d1eb      	bne.n	800261c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002644:	4b25      	ldr	r3, [pc, #148]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d20c      	bcs.n	800266c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b22      	ldr	r3, [pc, #136]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b20      	ldr	r3, [pc, #128]	; (80026dc <HAL_RCC_ClockConfig+0x1b8>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e032      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4916      	ldr	r1, [pc, #88]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002696:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	490e      	ldr	r1, [pc, #56]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026aa:	f000 f821 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80026ae:	4601      	mov	r1, r0
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	5cd3      	ldrb	r3, [r2, r3]
 80026be:	fa21 f303 	lsr.w	r3, r1, r3
 80026c2:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_RCC_ClockConfig+0x1c8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fe2c 	bl	8001328 <HAL_InitTick>

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023c00 	.word	0x40023c00
 80026e0:	40023800 	.word	0x40023800
 80026e4:	08003c94 	.word	0x08003c94
 80026e8:	20000000 	.word	0x20000000
 80026ec:	20000004 	.word	0x20000004

080026f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	607b      	str	r3, [r7, #4]
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	2300      	movs	r3, #0
 8002700:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002706:	4b63      	ldr	r3, [pc, #396]	; (8002894 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b04      	cmp	r3, #4
 8002710:	d007      	beq.n	8002722 <HAL_RCC_GetSysClockFreq+0x32>
 8002712:	2b08      	cmp	r3, #8
 8002714:	d008      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x38>
 8002716:	2b00      	cmp	r3, #0
 8002718:	f040 80b4 	bne.w	8002884 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800271c:	4b5e      	ldr	r3, [pc, #376]	; (8002898 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800271e:	60bb      	str	r3, [r7, #8]
       break;
 8002720:	e0b3      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002722:	4b5e      	ldr	r3, [pc, #376]	; (800289c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002724:	60bb      	str	r3, [r7, #8]
      break;
 8002726:	e0b0      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002728:	4b5a      	ldr	r3, [pc, #360]	; (8002894 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002730:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002732:	4b58      	ldr	r3, [pc, #352]	; (8002894 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d04a      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273e:	4b55      	ldr	r3, [pc, #340]	; (8002894 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	099b      	lsrs	r3, r3, #6
 8002744:	f04f 0400 	mov.w	r4, #0
 8002748:	f240 11ff 	movw	r1, #511	; 0x1ff
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	ea03 0501 	and.w	r5, r3, r1
 8002754:	ea04 0602 	and.w	r6, r4, r2
 8002758:	4629      	mov	r1, r5
 800275a:	4632      	mov	r2, r6
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	f04f 0400 	mov.w	r4, #0
 8002764:	0154      	lsls	r4, r2, #5
 8002766:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800276a:	014b      	lsls	r3, r1, #5
 800276c:	4619      	mov	r1, r3
 800276e:	4622      	mov	r2, r4
 8002770:	1b49      	subs	r1, r1, r5
 8002772:	eb62 0206 	sbc.w	r2, r2, r6
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	f04f 0400 	mov.w	r4, #0
 800277e:	0194      	lsls	r4, r2, #6
 8002780:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002784:	018b      	lsls	r3, r1, #6
 8002786:	1a5b      	subs	r3, r3, r1
 8002788:	eb64 0402 	sbc.w	r4, r4, r2
 800278c:	f04f 0100 	mov.w	r1, #0
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	00e2      	lsls	r2, r4, #3
 8002796:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800279a:	00d9      	lsls	r1, r3, #3
 800279c:	460b      	mov	r3, r1
 800279e:	4614      	mov	r4, r2
 80027a0:	195b      	adds	r3, r3, r5
 80027a2:	eb44 0406 	adc.w	r4, r4, r6
 80027a6:	f04f 0100 	mov.w	r1, #0
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	0262      	lsls	r2, r4, #9
 80027b0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80027b4:	0259      	lsls	r1, r3, #9
 80027b6:	460b      	mov	r3, r1
 80027b8:	4614      	mov	r4, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	4621      	mov	r1, r4
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f04f 0400 	mov.w	r4, #0
 80027c4:	461a      	mov	r2, r3
 80027c6:	4623      	mov	r3, r4
 80027c8:	f7fd fd06 	bl	80001d8 <__aeabi_uldivmod>
 80027cc:	4603      	mov	r3, r0
 80027ce:	460c      	mov	r4, r1
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	e049      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d4:	4b2f      	ldr	r3, [pc, #188]	; (8002894 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	099b      	lsrs	r3, r3, #6
 80027da:	f04f 0400 	mov.w	r4, #0
 80027de:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	ea03 0501 	and.w	r5, r3, r1
 80027ea:	ea04 0602 	and.w	r6, r4, r2
 80027ee:	4629      	mov	r1, r5
 80027f0:	4632      	mov	r2, r6
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	f04f 0400 	mov.w	r4, #0
 80027fa:	0154      	lsls	r4, r2, #5
 80027fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002800:	014b      	lsls	r3, r1, #5
 8002802:	4619      	mov	r1, r3
 8002804:	4622      	mov	r2, r4
 8002806:	1b49      	subs	r1, r1, r5
 8002808:	eb62 0206 	sbc.w	r2, r2, r6
 800280c:	f04f 0300 	mov.w	r3, #0
 8002810:	f04f 0400 	mov.w	r4, #0
 8002814:	0194      	lsls	r4, r2, #6
 8002816:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800281a:	018b      	lsls	r3, r1, #6
 800281c:	1a5b      	subs	r3, r3, r1
 800281e:	eb64 0402 	sbc.w	r4, r4, r2
 8002822:	f04f 0100 	mov.w	r1, #0
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	00e2      	lsls	r2, r4, #3
 800282c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002830:	00d9      	lsls	r1, r3, #3
 8002832:	460b      	mov	r3, r1
 8002834:	4614      	mov	r4, r2
 8002836:	195b      	adds	r3, r3, r5
 8002838:	eb44 0406 	adc.w	r4, r4, r6
 800283c:	f04f 0100 	mov.w	r1, #0
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	02a2      	lsls	r2, r4, #10
 8002846:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800284a:	0299      	lsls	r1, r3, #10
 800284c:	460b      	mov	r3, r1
 800284e:	4614      	mov	r4, r2
 8002850:	4618      	mov	r0, r3
 8002852:	4621      	mov	r1, r4
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f04f 0400 	mov.w	r4, #0
 800285a:	461a      	mov	r2, r3
 800285c:	4623      	mov	r3, r4
 800285e:	f7fd fcbb 	bl	80001d8 <__aeabi_uldivmod>
 8002862:	4603      	mov	r3, r0
 8002864:	460c      	mov	r4, r1
 8002866:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	3301      	adds	r3, #1
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	60bb      	str	r3, [r7, #8]
      break;
 8002882:	e002      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002886:	60bb      	str	r3, [r7, #8]
      break;
 8002888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288a:	68bb      	ldr	r3, [r7, #8]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002894:	40023800 	.word	0x40023800
 8002898:	00f42400 	.word	0x00f42400
 800289c:	007a1200 	.word	0x007a1200

080028a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000000 	.word	0x20000000

080028b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028bc:	f7ff fff0 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028c0:	4601      	mov	r1, r0
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	0a9b      	lsrs	r3, r3, #10
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	4a03      	ldr	r2, [pc, #12]	; (80028dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ce:	5cd3      	ldrb	r3, [r2, r3]
 80028d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40023800 	.word	0x40023800
 80028dc:	08003ca4 	.word	0x08003ca4

080028e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028e4:	f7ff ffdc 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028e8:	4601      	mov	r1, r0
 80028ea:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	0b5b      	lsrs	r3, r3, #13
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	4a03      	ldr	r2, [pc, #12]	; (8002904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40023800 	.word	0x40023800
 8002904:	08003ca4 	.word	0x08003ca4

08002908 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e03f      	b.n	800299a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe fb64 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2224      	movs	r2, #36	; 0x24
 8002938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800294a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fc41 	bl	80031d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002960:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695a      	ldr	r2, [r3, #20]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002970:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002980:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	4613      	mov	r3, r2
 80029b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b20      	cmp	r3, #32
 80029bc:	d153      	bne.n	8002a66 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_UART_Transmit_DMA+0x26>
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e04c      	b.n	8002a68 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_UART_Transmit_DMA+0x38>
 80029d8:	2302      	movs	r3, #2
 80029da:	e045      	b.n	8002a68 <HAL_UART_Transmit_DMA+0xc4>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80029e4:	68ba      	ldr	r2, [r7, #8]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	88fa      	ldrh	r2, [r7, #6]
 80029ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	88fa      	ldrh	r2, [r7, #6]
 80029f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2221      	movs	r2, #33	; 0x21
 8002a00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	4a19      	ldr	r2, [pc, #100]	; (8002a70 <HAL_UART_Transmit_DMA+0xcc>)
 8002a0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <HAL_UART_Transmit_DMA+0xd0>)
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a18:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <HAL_UART_Transmit_DMA+0xd4>)
 8002a1a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	2200      	movs	r2, #0
 8002a22:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8002a24:	f107 0308 	add.w	r3, r7, #8
 8002a28:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3304      	adds	r3, #4
 8002a38:	461a      	mov	r2, r3
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	f7fe fe84 	bl	8001748 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a48:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a60:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
  }
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	08002de1 	.word	0x08002de1
 8002a74:	08002e33 	.word	0x08002e33
 8002a78:	08002ed3 	.word	0x08002ed3

08002a7c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	4613      	mov	r3, r2
 8002a88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d166      	bne.n	8002b64 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_UART_Receive_DMA+0x26>
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e05f      	b.n	8002b66 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_UART_Receive_DMA+0x38>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e058      	b.n	8002b66 <HAL_UART_Receive_DMA+0xea>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	88fa      	ldrh	r2, [r7, #6]
 8002ac6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2222      	movs	r2, #34	; 0x22
 8002ad2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ada:	4a25      	ldr	r2, [pc, #148]	; (8002b70 <HAL_UART_Receive_DMA+0xf4>)
 8002adc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae2:	4a24      	ldr	r2, [pc, #144]	; (8002b74 <HAL_UART_Receive_DMA+0xf8>)
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aea:	4a23      	ldr	r2, [pc, #140]	; (8002b78 <HAL_UART_Receive_DMA+0xfc>)
 8002aec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af2:	2200      	movs	r2, #0
 8002af4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8002af6:	f107 0308 	add.w	r3, r7, #8
 8002afa:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	3304      	adds	r3, #4
 8002b06:	4619      	mov	r1, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	f7fe fe1b 	bl	8001748 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b3e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0201 	orr.w	r2, r2, #1
 8002b4e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b5e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e000      	b.n	8002b66 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002b64:	2302      	movs	r3, #2
  }
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	08002e4f 	.word	0x08002e4f
 8002b74:	08002eb7 	.word	0x08002eb7
 8002b78:	08002ed3 	.word	0x08002ed3

08002b7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10d      	bne.n	8002bce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f003 0320 	and.w	r3, r3, #32
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_UART_IRQHandler+0x52>
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fa83 	bl	80030d2 <UART_Receive_IT>
      return;
 8002bcc:	e0d1      	b.n	8002d72 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80b0 	beq.w	8002d36 <HAL_UART_IRQHandler+0x1ba>
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <HAL_UART_IRQHandler+0x70>
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80a5 	beq.w	8002d36 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HAL_UART_IRQHandler+0x90>
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c04:	f043 0201 	orr.w	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_UART_IRQHandler+0xb0>
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c24:	f043 0202 	orr.w	r2, r3, #2
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_UART_IRQHandler+0xd0>
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c44:	f043 0204 	orr.w	r2, r3, #4
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00f      	beq.n	8002c76 <HAL_UART_IRQHandler+0xfa>
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d104      	bne.n	8002c6a <HAL_UART_IRQHandler+0xee>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	f043 0208 	orr.w	r2, r3, #8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d078      	beq.n	8002d70 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d007      	beq.n	8002c98 <HAL_UART_IRQHandler+0x11c>
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa1d 	bl	80030d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	bf0c      	ite	eq
 8002ca6:	2301      	moveq	r3, #1
 8002ca8:	2300      	movne	r3, #0
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d102      	bne.n	8002cc0 <HAL_UART_IRQHandler+0x144>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d031      	beq.n	8002d24 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f966 	bl	8002f92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd0:	2b40      	cmp	r3, #64	; 0x40
 8002cd2:	d123      	bne.n	8002d1c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d013      	beq.n	8002d14 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf0:	4a21      	ldr	r2, [pc, #132]	; (8002d78 <HAL_UART_IRQHandler+0x1fc>)
 8002cf2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fe fd7d 	bl	80017f8 <HAL_DMA_Abort_IT>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d016      	beq.n	8002d32 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d12:	e00e      	b.n	8002d32 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f859 	bl	8002dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1a:	e00a      	b.n	8002d32 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f855 	bl	8002dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d22:	e006      	b.n	8002d32 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f851 	bl	8002dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002d30:	e01e      	b.n	8002d70 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d32:	bf00      	nop
    return;
 8002d34:	e01c      	b.n	8002d70 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_UART_IRQHandler+0x1d6>
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f953 	bl	8002ff6 <UART_Transmit_IT>
    return;
 8002d50:	e00f      	b.n	8002d72 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_UART_IRQHandler+0x1f6>
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f99b 	bl	80030a2 <UART_EndTransmit_IT>
    return;
 8002d6c:	bf00      	nop
 8002d6e:	e000      	b.n	8002d72 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002d70:	bf00      	nop
  }
}
 8002d72:	3720      	adds	r7, #32
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	08002fcf 	.word	0x08002fcf

08002d7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d113      	bne.n	8002e24 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e10:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e20:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002e22:	e002      	b.n	8002e2a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f7ff ffa9 	bl	8002d7c <HAL_UART_TxCpltCallback>
}
 8002e2a:	bf00      	nop
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7ff ffa5 	bl	8002d90 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e46:	bf00      	nop
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b084      	sub	sp, #16
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11e      	bne.n	8002ea8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e7e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0201 	bic.w	r2, r2, #1
 8002e8e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e9e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f7ff ff7b 	bl	8002da4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002eae:	bf00      	nop
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7ff ff77 	bl	8002db8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eee:	2b80      	cmp	r3, #128	; 0x80
 8002ef0:	bf0c      	ite	eq
 8002ef2:	2301      	moveq	r3, #1
 8002ef4:	2300      	movne	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b21      	cmp	r3, #33	; 0x21
 8002f04:	d108      	bne.n	8002f18 <UART_DMAError+0x46>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002f12:	68b8      	ldr	r0, [r7, #8]
 8002f14:	f000 f827 	bl	8002f66 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f22:	2b40      	cmp	r3, #64	; 0x40
 8002f24:	bf0c      	ite	eq
 8002f26:	2301      	moveq	r3, #1
 8002f28:	2300      	movne	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b22      	cmp	r3, #34	; 0x22
 8002f38:	d108      	bne.n	8002f4c <UART_DMAError+0x7a>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2200      	movs	r2, #0
 8002f44:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002f46:	68b8      	ldr	r0, [r7, #8]
 8002f48:	f000 f823 	bl	8002f92 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f50:	f043 0210 	orr.w	r2, r3, #16
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f58:	68b8      	ldr	r0, [r7, #8]
 8002f5a:	f7ff ff37 	bl	8002dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002f7c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fa8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695a      	ldr	r2, [r3, #20]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f7ff feef 	bl	8002dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b085      	sub	sp, #20
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b21      	cmp	r3, #33	; 0x21
 8003008:	d144      	bne.n	8003094 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003012:	d11a      	bne.n	800304a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003028:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d105      	bne.n	800303e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	1c9a      	adds	r2, r3, #2
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	621a      	str	r2, [r3, #32]
 800303c:	e00e      	b.n	800305c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	621a      	str	r2, [r3, #32]
 8003048:	e008      	b.n	800305c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	1c59      	adds	r1, r3, #1
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6211      	str	r1, [r2, #32]
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003060:	b29b      	uxth	r3, r3
 8003062:	3b01      	subs	r3, #1
 8003064:	b29b      	uxth	r3, r3
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4619      	mov	r1, r3
 800306a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10f      	bne.n	8003090 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800307e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800308e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	e000      	b.n	8003096 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff fe5a 	bl	8002d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b22      	cmp	r3, #34	; 0x22
 80030e4:	d171      	bne.n	80031ca <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ee:	d123      	bne.n	8003138 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10e      	bne.n	800311c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	b29b      	uxth	r3, r3
 8003106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	1c9a      	adds	r2, r3, #2
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	629a      	str	r2, [r3, #40]	; 0x28
 800311a:	e029      	b.n	8003170 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	b29b      	uxth	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	629a      	str	r2, [r3, #40]	; 0x28
 8003136:	e01b      	b.n	8003170 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10a      	bne.n	8003156 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6858      	ldr	r0, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	1c59      	adds	r1, r3, #1
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6291      	str	r1, [r2, #40]	; 0x28
 8003150:	b2c2      	uxtb	r2, r0
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	e00c      	b.n	8003170 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	1c58      	adds	r0, r3, #1
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	6288      	str	r0, [r1, #40]	; 0x28
 8003168:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29b      	uxth	r3, r3
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4619      	mov	r1, r3
 800317e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003180:	2b00      	cmp	r3, #0
 8003182:	d120      	bne.n	80031c6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0220 	bic.w	r2, r2, #32
 8003192:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff fdf1 	bl	8002da4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e002      	b.n	80031cc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e000      	b.n	80031cc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
  }
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d8:	b085      	sub	sp, #20
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003216:	f023 030c 	bic.w	r3, r3, #12
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	430b      	orrs	r3, r1
 8003222:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003242:	f040 818b 	bne.w	800355c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4ac1      	ldr	r2, [pc, #772]	; (8003550 <UART_SetConfig+0x37c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d005      	beq.n	800325c <UART_SetConfig+0x88>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4abf      	ldr	r2, [pc, #764]	; (8003554 <UART_SetConfig+0x380>)
 8003256:	4293      	cmp	r3, r2
 8003258:	f040 80bd 	bne.w	80033d6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800325c:	f7ff fb40 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8003260:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	461d      	mov	r5, r3
 8003266:	f04f 0600 	mov.w	r6, #0
 800326a:	46a8      	mov	r8, r5
 800326c:	46b1      	mov	r9, r6
 800326e:	eb18 0308 	adds.w	r3, r8, r8
 8003272:	eb49 0409 	adc.w	r4, r9, r9
 8003276:	4698      	mov	r8, r3
 8003278:	46a1      	mov	r9, r4
 800327a:	eb18 0805 	adds.w	r8, r8, r5
 800327e:	eb49 0906 	adc.w	r9, r9, r6
 8003282:	f04f 0100 	mov.w	r1, #0
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800328e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003292:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003296:	4688      	mov	r8, r1
 8003298:	4691      	mov	r9, r2
 800329a:	eb18 0005 	adds.w	r0, r8, r5
 800329e:	eb49 0106 	adc.w	r1, r9, r6
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	461d      	mov	r5, r3
 80032a8:	f04f 0600 	mov.w	r6, #0
 80032ac:	196b      	adds	r3, r5, r5
 80032ae:	eb46 0406 	adc.w	r4, r6, r6
 80032b2:	461a      	mov	r2, r3
 80032b4:	4623      	mov	r3, r4
 80032b6:	f7fc ff8f 	bl	80001d8 <__aeabi_uldivmod>
 80032ba:	4603      	mov	r3, r0
 80032bc:	460c      	mov	r4, r1
 80032be:	461a      	mov	r2, r3
 80032c0:	4ba5      	ldr	r3, [pc, #660]	; (8003558 <UART_SetConfig+0x384>)
 80032c2:	fba3 2302 	umull	r2, r3, r3, r2
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	461d      	mov	r5, r3
 80032d0:	f04f 0600 	mov.w	r6, #0
 80032d4:	46a9      	mov	r9, r5
 80032d6:	46b2      	mov	sl, r6
 80032d8:	eb19 0309 	adds.w	r3, r9, r9
 80032dc:	eb4a 040a 	adc.w	r4, sl, sl
 80032e0:	4699      	mov	r9, r3
 80032e2:	46a2      	mov	sl, r4
 80032e4:	eb19 0905 	adds.w	r9, r9, r5
 80032e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80032ec:	f04f 0100 	mov.w	r1, #0
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003300:	4689      	mov	r9, r1
 8003302:	4692      	mov	sl, r2
 8003304:	eb19 0005 	adds.w	r0, r9, r5
 8003308:	eb4a 0106 	adc.w	r1, sl, r6
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	461d      	mov	r5, r3
 8003312:	f04f 0600 	mov.w	r6, #0
 8003316:	196b      	adds	r3, r5, r5
 8003318:	eb46 0406 	adc.w	r4, r6, r6
 800331c:	461a      	mov	r2, r3
 800331e:	4623      	mov	r3, r4
 8003320:	f7fc ff5a 	bl	80001d8 <__aeabi_uldivmod>
 8003324:	4603      	mov	r3, r0
 8003326:	460c      	mov	r4, r1
 8003328:	461a      	mov	r2, r3
 800332a:	4b8b      	ldr	r3, [pc, #556]	; (8003558 <UART_SetConfig+0x384>)
 800332c:	fba3 1302 	umull	r1, r3, r3, r2
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	2164      	movs	r1, #100	; 0x64
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	3332      	adds	r3, #50	; 0x32
 800333e:	4a86      	ldr	r2, [pc, #536]	; (8003558 <UART_SetConfig+0x384>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800334c:	4498      	add	r8, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	461d      	mov	r5, r3
 8003352:	f04f 0600 	mov.w	r6, #0
 8003356:	46a9      	mov	r9, r5
 8003358:	46b2      	mov	sl, r6
 800335a:	eb19 0309 	adds.w	r3, r9, r9
 800335e:	eb4a 040a 	adc.w	r4, sl, sl
 8003362:	4699      	mov	r9, r3
 8003364:	46a2      	mov	sl, r4
 8003366:	eb19 0905 	adds.w	r9, r9, r5
 800336a:	eb4a 0a06 	adc.w	sl, sl, r6
 800336e:	f04f 0100 	mov.w	r1, #0
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800337a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800337e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003382:	4689      	mov	r9, r1
 8003384:	4692      	mov	sl, r2
 8003386:	eb19 0005 	adds.w	r0, r9, r5
 800338a:	eb4a 0106 	adc.w	r1, sl, r6
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	461d      	mov	r5, r3
 8003394:	f04f 0600 	mov.w	r6, #0
 8003398:	196b      	adds	r3, r5, r5
 800339a:	eb46 0406 	adc.w	r4, r6, r6
 800339e:	461a      	mov	r2, r3
 80033a0:	4623      	mov	r3, r4
 80033a2:	f7fc ff19 	bl	80001d8 <__aeabi_uldivmod>
 80033a6:	4603      	mov	r3, r0
 80033a8:	460c      	mov	r4, r1
 80033aa:	461a      	mov	r2, r3
 80033ac:	4b6a      	ldr	r3, [pc, #424]	; (8003558 <UART_SetConfig+0x384>)
 80033ae:	fba3 1302 	umull	r1, r3, r3, r2
 80033b2:	095b      	lsrs	r3, r3, #5
 80033b4:	2164      	movs	r1, #100	; 0x64
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	3332      	adds	r3, #50	; 0x32
 80033c0:	4a65      	ldr	r2, [pc, #404]	; (8003558 <UART_SetConfig+0x384>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	f003 0207 	and.w	r2, r3, #7
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4442      	add	r2, r8
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	e26f      	b.n	80038b6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033d6:	f7ff fa6f 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 80033da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	461d      	mov	r5, r3
 80033e0:	f04f 0600 	mov.w	r6, #0
 80033e4:	46a8      	mov	r8, r5
 80033e6:	46b1      	mov	r9, r6
 80033e8:	eb18 0308 	adds.w	r3, r8, r8
 80033ec:	eb49 0409 	adc.w	r4, r9, r9
 80033f0:	4698      	mov	r8, r3
 80033f2:	46a1      	mov	r9, r4
 80033f4:	eb18 0805 	adds.w	r8, r8, r5
 80033f8:	eb49 0906 	adc.w	r9, r9, r6
 80033fc:	f04f 0100 	mov.w	r1, #0
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003408:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800340c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003410:	4688      	mov	r8, r1
 8003412:	4691      	mov	r9, r2
 8003414:	eb18 0005 	adds.w	r0, r8, r5
 8003418:	eb49 0106 	adc.w	r1, r9, r6
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	461d      	mov	r5, r3
 8003422:	f04f 0600 	mov.w	r6, #0
 8003426:	196b      	adds	r3, r5, r5
 8003428:	eb46 0406 	adc.w	r4, r6, r6
 800342c:	461a      	mov	r2, r3
 800342e:	4623      	mov	r3, r4
 8003430:	f7fc fed2 	bl	80001d8 <__aeabi_uldivmod>
 8003434:	4603      	mov	r3, r0
 8003436:	460c      	mov	r4, r1
 8003438:	461a      	mov	r2, r3
 800343a:	4b47      	ldr	r3, [pc, #284]	; (8003558 <UART_SetConfig+0x384>)
 800343c:	fba3 2302 	umull	r2, r3, r3, r2
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	461d      	mov	r5, r3
 800344a:	f04f 0600 	mov.w	r6, #0
 800344e:	46a9      	mov	r9, r5
 8003450:	46b2      	mov	sl, r6
 8003452:	eb19 0309 	adds.w	r3, r9, r9
 8003456:	eb4a 040a 	adc.w	r4, sl, sl
 800345a:	4699      	mov	r9, r3
 800345c:	46a2      	mov	sl, r4
 800345e:	eb19 0905 	adds.w	r9, r9, r5
 8003462:	eb4a 0a06 	adc.w	sl, sl, r6
 8003466:	f04f 0100 	mov.w	r1, #0
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003472:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003476:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800347a:	4689      	mov	r9, r1
 800347c:	4692      	mov	sl, r2
 800347e:	eb19 0005 	adds.w	r0, r9, r5
 8003482:	eb4a 0106 	adc.w	r1, sl, r6
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	461d      	mov	r5, r3
 800348c:	f04f 0600 	mov.w	r6, #0
 8003490:	196b      	adds	r3, r5, r5
 8003492:	eb46 0406 	adc.w	r4, r6, r6
 8003496:	461a      	mov	r2, r3
 8003498:	4623      	mov	r3, r4
 800349a:	f7fc fe9d 	bl	80001d8 <__aeabi_uldivmod>
 800349e:	4603      	mov	r3, r0
 80034a0:	460c      	mov	r4, r1
 80034a2:	461a      	mov	r2, r3
 80034a4:	4b2c      	ldr	r3, [pc, #176]	; (8003558 <UART_SetConfig+0x384>)
 80034a6:	fba3 1302 	umull	r1, r3, r3, r2
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	2164      	movs	r1, #100	; 0x64
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	3332      	adds	r3, #50	; 0x32
 80034b8:	4a27      	ldr	r2, [pc, #156]	; (8003558 <UART_SetConfig+0x384>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034c6:	4498      	add	r8, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	461d      	mov	r5, r3
 80034cc:	f04f 0600 	mov.w	r6, #0
 80034d0:	46a9      	mov	r9, r5
 80034d2:	46b2      	mov	sl, r6
 80034d4:	eb19 0309 	adds.w	r3, r9, r9
 80034d8:	eb4a 040a 	adc.w	r4, sl, sl
 80034dc:	4699      	mov	r9, r3
 80034de:	46a2      	mov	sl, r4
 80034e0:	eb19 0905 	adds.w	r9, r9, r5
 80034e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80034e8:	f04f 0100 	mov.w	r1, #0
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034fc:	4689      	mov	r9, r1
 80034fe:	4692      	mov	sl, r2
 8003500:	eb19 0005 	adds.w	r0, r9, r5
 8003504:	eb4a 0106 	adc.w	r1, sl, r6
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	461d      	mov	r5, r3
 800350e:	f04f 0600 	mov.w	r6, #0
 8003512:	196b      	adds	r3, r5, r5
 8003514:	eb46 0406 	adc.w	r4, r6, r6
 8003518:	461a      	mov	r2, r3
 800351a:	4623      	mov	r3, r4
 800351c:	f7fc fe5c 	bl	80001d8 <__aeabi_uldivmod>
 8003520:	4603      	mov	r3, r0
 8003522:	460c      	mov	r4, r1
 8003524:	461a      	mov	r2, r3
 8003526:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <UART_SetConfig+0x384>)
 8003528:	fba3 1302 	umull	r1, r3, r3, r2
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	2164      	movs	r1, #100	; 0x64
 8003530:	fb01 f303 	mul.w	r3, r1, r3
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	3332      	adds	r3, #50	; 0x32
 800353a:	4a07      	ldr	r2, [pc, #28]	; (8003558 <UART_SetConfig+0x384>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	f003 0207 	and.w	r2, r3, #7
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4442      	add	r2, r8
 800354c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800354e:	e1b2      	b.n	80038b6 <UART_SetConfig+0x6e2>
 8003550:	40011000 	.word	0x40011000
 8003554:	40011400 	.word	0x40011400
 8003558:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4ad7      	ldr	r2, [pc, #860]	; (80038c0 <UART_SetConfig+0x6ec>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d005      	beq.n	8003572 <UART_SetConfig+0x39e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4ad6      	ldr	r2, [pc, #856]	; (80038c4 <UART_SetConfig+0x6f0>)
 800356c:	4293      	cmp	r3, r2
 800356e:	f040 80d1 	bne.w	8003714 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003572:	f7ff f9b5 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8003576:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	469a      	mov	sl, r3
 800357c:	f04f 0b00 	mov.w	fp, #0
 8003580:	46d0      	mov	r8, sl
 8003582:	46d9      	mov	r9, fp
 8003584:	eb18 0308 	adds.w	r3, r8, r8
 8003588:	eb49 0409 	adc.w	r4, r9, r9
 800358c:	4698      	mov	r8, r3
 800358e:	46a1      	mov	r9, r4
 8003590:	eb18 080a 	adds.w	r8, r8, sl
 8003594:	eb49 090b 	adc.w	r9, r9, fp
 8003598:	f04f 0100 	mov.w	r1, #0
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80035a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80035a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80035ac:	4688      	mov	r8, r1
 80035ae:	4691      	mov	r9, r2
 80035b0:	eb1a 0508 	adds.w	r5, sl, r8
 80035b4:	eb4b 0609 	adc.w	r6, fp, r9
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4619      	mov	r1, r3
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	f04f 0400 	mov.w	r4, #0
 80035ca:	0094      	lsls	r4, r2, #2
 80035cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035d0:	008b      	lsls	r3, r1, #2
 80035d2:	461a      	mov	r2, r3
 80035d4:	4623      	mov	r3, r4
 80035d6:	4628      	mov	r0, r5
 80035d8:	4631      	mov	r1, r6
 80035da:	f7fc fdfd 	bl	80001d8 <__aeabi_uldivmod>
 80035de:	4603      	mov	r3, r0
 80035e0:	460c      	mov	r4, r1
 80035e2:	461a      	mov	r2, r3
 80035e4:	4bb8      	ldr	r3, [pc, #736]	; (80038c8 <UART_SetConfig+0x6f4>)
 80035e6:	fba3 2302 	umull	r2, r3, r3, r2
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	469b      	mov	fp, r3
 80035f4:	f04f 0c00 	mov.w	ip, #0
 80035f8:	46d9      	mov	r9, fp
 80035fa:	46e2      	mov	sl, ip
 80035fc:	eb19 0309 	adds.w	r3, r9, r9
 8003600:	eb4a 040a 	adc.w	r4, sl, sl
 8003604:	4699      	mov	r9, r3
 8003606:	46a2      	mov	sl, r4
 8003608:	eb19 090b 	adds.w	r9, r9, fp
 800360c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003610:	f04f 0100 	mov.w	r1, #0
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800361c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003620:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003624:	4689      	mov	r9, r1
 8003626:	4692      	mov	sl, r2
 8003628:	eb1b 0509 	adds.w	r5, fp, r9
 800362c:	eb4c 060a 	adc.w	r6, ip, sl
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	4619      	mov	r1, r3
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	f04f 0400 	mov.w	r4, #0
 8003642:	0094      	lsls	r4, r2, #2
 8003644:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003648:	008b      	lsls	r3, r1, #2
 800364a:	461a      	mov	r2, r3
 800364c:	4623      	mov	r3, r4
 800364e:	4628      	mov	r0, r5
 8003650:	4631      	mov	r1, r6
 8003652:	f7fc fdc1 	bl	80001d8 <__aeabi_uldivmod>
 8003656:	4603      	mov	r3, r0
 8003658:	460c      	mov	r4, r1
 800365a:	461a      	mov	r2, r3
 800365c:	4b9a      	ldr	r3, [pc, #616]	; (80038c8 <UART_SetConfig+0x6f4>)
 800365e:	fba3 1302 	umull	r1, r3, r3, r2
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	2164      	movs	r1, #100	; 0x64
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	3332      	adds	r3, #50	; 0x32
 8003670:	4a95      	ldr	r2, [pc, #596]	; (80038c8 <UART_SetConfig+0x6f4>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800367c:	4498      	add	r8, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	469b      	mov	fp, r3
 8003682:	f04f 0c00 	mov.w	ip, #0
 8003686:	46d9      	mov	r9, fp
 8003688:	46e2      	mov	sl, ip
 800368a:	eb19 0309 	adds.w	r3, r9, r9
 800368e:	eb4a 040a 	adc.w	r4, sl, sl
 8003692:	4699      	mov	r9, r3
 8003694:	46a2      	mov	sl, r4
 8003696:	eb19 090b 	adds.w	r9, r9, fp
 800369a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036b2:	4689      	mov	r9, r1
 80036b4:	4692      	mov	sl, r2
 80036b6:	eb1b 0509 	adds.w	r5, fp, r9
 80036ba:	eb4c 060a 	adc.w	r6, ip, sl
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4619      	mov	r1, r3
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	f04f 0400 	mov.w	r4, #0
 80036d0:	0094      	lsls	r4, r2, #2
 80036d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036d6:	008b      	lsls	r3, r1, #2
 80036d8:	461a      	mov	r2, r3
 80036da:	4623      	mov	r3, r4
 80036dc:	4628      	mov	r0, r5
 80036de:	4631      	mov	r1, r6
 80036e0:	f7fc fd7a 	bl	80001d8 <__aeabi_uldivmod>
 80036e4:	4603      	mov	r3, r0
 80036e6:	460c      	mov	r4, r1
 80036e8:	461a      	mov	r2, r3
 80036ea:	4b77      	ldr	r3, [pc, #476]	; (80038c8 <UART_SetConfig+0x6f4>)
 80036ec:	fba3 1302 	umull	r1, r3, r3, r2
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	2164      	movs	r1, #100	; 0x64
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	3332      	adds	r3, #50	; 0x32
 80036fe:	4a72      	ldr	r2, [pc, #456]	; (80038c8 <UART_SetConfig+0x6f4>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	f003 020f 	and.w	r2, r3, #15
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4442      	add	r2, r8
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	e0d0      	b.n	80038b6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003714:	f7ff f8d0 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003718:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	469a      	mov	sl, r3
 800371e:	f04f 0b00 	mov.w	fp, #0
 8003722:	46d0      	mov	r8, sl
 8003724:	46d9      	mov	r9, fp
 8003726:	eb18 0308 	adds.w	r3, r8, r8
 800372a:	eb49 0409 	adc.w	r4, r9, r9
 800372e:	4698      	mov	r8, r3
 8003730:	46a1      	mov	r9, r4
 8003732:	eb18 080a 	adds.w	r8, r8, sl
 8003736:	eb49 090b 	adc.w	r9, r9, fp
 800373a:	f04f 0100 	mov.w	r1, #0
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003746:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800374a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800374e:	4688      	mov	r8, r1
 8003750:	4691      	mov	r9, r2
 8003752:	eb1a 0508 	adds.w	r5, sl, r8
 8003756:	eb4b 0609 	adc.w	r6, fp, r9
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	4619      	mov	r1, r3
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	f04f 0400 	mov.w	r4, #0
 800376c:	0094      	lsls	r4, r2, #2
 800376e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003772:	008b      	lsls	r3, r1, #2
 8003774:	461a      	mov	r2, r3
 8003776:	4623      	mov	r3, r4
 8003778:	4628      	mov	r0, r5
 800377a:	4631      	mov	r1, r6
 800377c:	f7fc fd2c 	bl	80001d8 <__aeabi_uldivmod>
 8003780:	4603      	mov	r3, r0
 8003782:	460c      	mov	r4, r1
 8003784:	461a      	mov	r2, r3
 8003786:	4b50      	ldr	r3, [pc, #320]	; (80038c8 <UART_SetConfig+0x6f4>)
 8003788:	fba3 2302 	umull	r2, r3, r3, r2
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	469b      	mov	fp, r3
 8003796:	f04f 0c00 	mov.w	ip, #0
 800379a:	46d9      	mov	r9, fp
 800379c:	46e2      	mov	sl, ip
 800379e:	eb19 0309 	adds.w	r3, r9, r9
 80037a2:	eb4a 040a 	adc.w	r4, sl, sl
 80037a6:	4699      	mov	r9, r3
 80037a8:	46a2      	mov	sl, r4
 80037aa:	eb19 090b 	adds.w	r9, r9, fp
 80037ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80037b2:	f04f 0100 	mov.w	r1, #0
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037c6:	4689      	mov	r9, r1
 80037c8:	4692      	mov	sl, r2
 80037ca:	eb1b 0509 	adds.w	r5, fp, r9
 80037ce:	eb4c 060a 	adc.w	r6, ip, sl
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4619      	mov	r1, r3
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	f04f 0400 	mov.w	r4, #0
 80037e4:	0094      	lsls	r4, r2, #2
 80037e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037ea:	008b      	lsls	r3, r1, #2
 80037ec:	461a      	mov	r2, r3
 80037ee:	4623      	mov	r3, r4
 80037f0:	4628      	mov	r0, r5
 80037f2:	4631      	mov	r1, r6
 80037f4:	f7fc fcf0 	bl	80001d8 <__aeabi_uldivmod>
 80037f8:	4603      	mov	r3, r0
 80037fa:	460c      	mov	r4, r1
 80037fc:	461a      	mov	r2, r3
 80037fe:	4b32      	ldr	r3, [pc, #200]	; (80038c8 <UART_SetConfig+0x6f4>)
 8003800:	fba3 1302 	umull	r1, r3, r3, r2
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	2164      	movs	r1, #100	; 0x64
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	3332      	adds	r3, #50	; 0x32
 8003812:	4a2d      	ldr	r2, [pc, #180]	; (80038c8 <UART_SetConfig+0x6f4>)
 8003814:	fba2 2303 	umull	r2, r3, r2, r3
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800381e:	4498      	add	r8, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	469b      	mov	fp, r3
 8003824:	f04f 0c00 	mov.w	ip, #0
 8003828:	46d9      	mov	r9, fp
 800382a:	46e2      	mov	sl, ip
 800382c:	eb19 0309 	adds.w	r3, r9, r9
 8003830:	eb4a 040a 	adc.w	r4, sl, sl
 8003834:	4699      	mov	r9, r3
 8003836:	46a2      	mov	sl, r4
 8003838:	eb19 090b 	adds.w	r9, r9, fp
 800383c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003840:	f04f 0100 	mov.w	r1, #0
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800384c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003850:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003854:	4689      	mov	r9, r1
 8003856:	4692      	mov	sl, r2
 8003858:	eb1b 0509 	adds.w	r5, fp, r9
 800385c:	eb4c 060a 	adc.w	r6, ip, sl
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	4619      	mov	r1, r3
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	f04f 0400 	mov.w	r4, #0
 8003872:	0094      	lsls	r4, r2, #2
 8003874:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003878:	008b      	lsls	r3, r1, #2
 800387a:	461a      	mov	r2, r3
 800387c:	4623      	mov	r3, r4
 800387e:	4628      	mov	r0, r5
 8003880:	4631      	mov	r1, r6
 8003882:	f7fc fca9 	bl	80001d8 <__aeabi_uldivmod>
 8003886:	4603      	mov	r3, r0
 8003888:	460c      	mov	r4, r1
 800388a:	461a      	mov	r2, r3
 800388c:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <UART_SetConfig+0x6f4>)
 800388e:	fba3 1302 	umull	r1, r3, r3, r2
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	2164      	movs	r1, #100	; 0x64
 8003896:	fb01 f303 	mul.w	r3, r1, r3
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	3332      	adds	r3, #50	; 0x32
 80038a0:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <UART_SetConfig+0x6f4>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	f003 020f 	and.w	r2, r3, #15
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4442      	add	r2, r8
 80038b2:	609a      	str	r2, [r3, #8]
}
 80038b4:	e7ff      	b.n	80038b6 <UART_SetConfig+0x6e2>
 80038b6:	bf00      	nop
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038c0:	40011000 	.word	0x40011000
 80038c4:	40011400 	.word	0x40011400
 80038c8:	51eb851f 	.word	0x51eb851f

080038cc <calloc>:
 80038cc:	4b02      	ldr	r3, [pc, #8]	; (80038d8 <calloc+0xc>)
 80038ce:	460a      	mov	r2, r1
 80038d0:	4601      	mov	r1, r0
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	f000 b83f 	b.w	8003956 <_calloc_r>
 80038d8:	2000000c 	.word	0x2000000c

080038dc <__errno>:
 80038dc:	4b01      	ldr	r3, [pc, #4]	; (80038e4 <__errno+0x8>)
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	2000000c 	.word	0x2000000c

080038e8 <__libc_init_array>:
 80038e8:	b570      	push	{r4, r5, r6, lr}
 80038ea:	4e0d      	ldr	r6, [pc, #52]	; (8003920 <__libc_init_array+0x38>)
 80038ec:	4c0d      	ldr	r4, [pc, #52]	; (8003924 <__libc_init_array+0x3c>)
 80038ee:	1ba4      	subs	r4, r4, r6
 80038f0:	10a4      	asrs	r4, r4, #2
 80038f2:	2500      	movs	r5, #0
 80038f4:	42a5      	cmp	r5, r4
 80038f6:	d109      	bne.n	800390c <__libc_init_array+0x24>
 80038f8:	4e0b      	ldr	r6, [pc, #44]	; (8003928 <__libc_init_array+0x40>)
 80038fa:	4c0c      	ldr	r4, [pc, #48]	; (800392c <__libc_init_array+0x44>)
 80038fc:	f000 f8a6 	bl	8003a4c <_init>
 8003900:	1ba4      	subs	r4, r4, r6
 8003902:	10a4      	asrs	r4, r4, #2
 8003904:	2500      	movs	r5, #0
 8003906:	42a5      	cmp	r5, r4
 8003908:	d105      	bne.n	8003916 <__libc_init_array+0x2e>
 800390a:	bd70      	pop	{r4, r5, r6, pc}
 800390c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003910:	4798      	blx	r3
 8003912:	3501      	adds	r5, #1
 8003914:	e7ee      	b.n	80038f4 <__libc_init_array+0xc>
 8003916:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800391a:	4798      	blx	r3
 800391c:	3501      	adds	r5, #1
 800391e:	e7f2      	b.n	8003906 <__libc_init_array+0x1e>
 8003920:	08003cbc 	.word	0x08003cbc
 8003924:	08003cbc 	.word	0x08003cbc
 8003928:	08003cbc 	.word	0x08003cbc
 800392c:	08003cc0 	.word	0x08003cc0

08003930 <memcpy>:
 8003930:	b510      	push	{r4, lr}
 8003932:	1e43      	subs	r3, r0, #1
 8003934:	440a      	add	r2, r1
 8003936:	4291      	cmp	r1, r2
 8003938:	d100      	bne.n	800393c <memcpy+0xc>
 800393a:	bd10      	pop	{r4, pc}
 800393c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003940:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003944:	e7f7      	b.n	8003936 <memcpy+0x6>

08003946 <memset>:
 8003946:	4402      	add	r2, r0
 8003948:	4603      	mov	r3, r0
 800394a:	4293      	cmp	r3, r2
 800394c:	d100      	bne.n	8003950 <memset+0xa>
 800394e:	4770      	bx	lr
 8003950:	f803 1b01 	strb.w	r1, [r3], #1
 8003954:	e7f9      	b.n	800394a <memset+0x4>

08003956 <_calloc_r>:
 8003956:	b538      	push	{r3, r4, r5, lr}
 8003958:	fb02 f401 	mul.w	r4, r2, r1
 800395c:	4621      	mov	r1, r4
 800395e:	f000 f809 	bl	8003974 <_malloc_r>
 8003962:	4605      	mov	r5, r0
 8003964:	b118      	cbz	r0, 800396e <_calloc_r+0x18>
 8003966:	4622      	mov	r2, r4
 8003968:	2100      	movs	r1, #0
 800396a:	f7ff ffec 	bl	8003946 <memset>
 800396e:	4628      	mov	r0, r5
 8003970:	bd38      	pop	{r3, r4, r5, pc}
	...

08003974 <_malloc_r>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	1ccd      	adds	r5, r1, #3
 8003978:	f025 0503 	bic.w	r5, r5, #3
 800397c:	3508      	adds	r5, #8
 800397e:	2d0c      	cmp	r5, #12
 8003980:	bf38      	it	cc
 8003982:	250c      	movcc	r5, #12
 8003984:	2d00      	cmp	r5, #0
 8003986:	4606      	mov	r6, r0
 8003988:	db01      	blt.n	800398e <_malloc_r+0x1a>
 800398a:	42a9      	cmp	r1, r5
 800398c:	d903      	bls.n	8003996 <_malloc_r+0x22>
 800398e:	230c      	movs	r3, #12
 8003990:	6033      	str	r3, [r6, #0]
 8003992:	2000      	movs	r0, #0
 8003994:	bd70      	pop	{r4, r5, r6, pc}
 8003996:	f000 f857 	bl	8003a48 <__malloc_lock>
 800399a:	4a21      	ldr	r2, [pc, #132]	; (8003a20 <_malloc_r+0xac>)
 800399c:	6814      	ldr	r4, [r2, #0]
 800399e:	4621      	mov	r1, r4
 80039a0:	b991      	cbnz	r1, 80039c8 <_malloc_r+0x54>
 80039a2:	4c20      	ldr	r4, [pc, #128]	; (8003a24 <_malloc_r+0xb0>)
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	b91b      	cbnz	r3, 80039b0 <_malloc_r+0x3c>
 80039a8:	4630      	mov	r0, r6
 80039aa:	f000 f83d 	bl	8003a28 <_sbrk_r>
 80039ae:	6020      	str	r0, [r4, #0]
 80039b0:	4629      	mov	r1, r5
 80039b2:	4630      	mov	r0, r6
 80039b4:	f000 f838 	bl	8003a28 <_sbrk_r>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d124      	bne.n	8003a06 <_malloc_r+0x92>
 80039bc:	230c      	movs	r3, #12
 80039be:	6033      	str	r3, [r6, #0]
 80039c0:	4630      	mov	r0, r6
 80039c2:	f000 f842 	bl	8003a4a <__malloc_unlock>
 80039c6:	e7e4      	b.n	8003992 <_malloc_r+0x1e>
 80039c8:	680b      	ldr	r3, [r1, #0]
 80039ca:	1b5b      	subs	r3, r3, r5
 80039cc:	d418      	bmi.n	8003a00 <_malloc_r+0x8c>
 80039ce:	2b0b      	cmp	r3, #11
 80039d0:	d90f      	bls.n	80039f2 <_malloc_r+0x7e>
 80039d2:	600b      	str	r3, [r1, #0]
 80039d4:	50cd      	str	r5, [r1, r3]
 80039d6:	18cc      	adds	r4, r1, r3
 80039d8:	4630      	mov	r0, r6
 80039da:	f000 f836 	bl	8003a4a <__malloc_unlock>
 80039de:	f104 000b 	add.w	r0, r4, #11
 80039e2:	1d23      	adds	r3, r4, #4
 80039e4:	f020 0007 	bic.w	r0, r0, #7
 80039e8:	1ac3      	subs	r3, r0, r3
 80039ea:	d0d3      	beq.n	8003994 <_malloc_r+0x20>
 80039ec:	425a      	negs	r2, r3
 80039ee:	50e2      	str	r2, [r4, r3]
 80039f0:	e7d0      	b.n	8003994 <_malloc_r+0x20>
 80039f2:	428c      	cmp	r4, r1
 80039f4:	684b      	ldr	r3, [r1, #4]
 80039f6:	bf16      	itet	ne
 80039f8:	6063      	strne	r3, [r4, #4]
 80039fa:	6013      	streq	r3, [r2, #0]
 80039fc:	460c      	movne	r4, r1
 80039fe:	e7eb      	b.n	80039d8 <_malloc_r+0x64>
 8003a00:	460c      	mov	r4, r1
 8003a02:	6849      	ldr	r1, [r1, #4]
 8003a04:	e7cc      	b.n	80039a0 <_malloc_r+0x2c>
 8003a06:	1cc4      	adds	r4, r0, #3
 8003a08:	f024 0403 	bic.w	r4, r4, #3
 8003a0c:	42a0      	cmp	r0, r4
 8003a0e:	d005      	beq.n	8003a1c <_malloc_r+0xa8>
 8003a10:	1a21      	subs	r1, r4, r0
 8003a12:	4630      	mov	r0, r6
 8003a14:	f000 f808 	bl	8003a28 <_sbrk_r>
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d0cf      	beq.n	80039bc <_malloc_r+0x48>
 8003a1c:	6025      	str	r5, [r4, #0]
 8003a1e:	e7db      	b.n	80039d8 <_malloc_r+0x64>
 8003a20:	200002b8 	.word	0x200002b8
 8003a24:	200002bc 	.word	0x200002bc

08003a28 <_sbrk_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	4c06      	ldr	r4, [pc, #24]	; (8003a44 <_sbrk_r+0x1c>)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	4605      	mov	r5, r0
 8003a30:	4608      	mov	r0, r1
 8003a32:	6023      	str	r3, [r4, #0]
 8003a34:	f7fd fbe0 	bl	80011f8 <_sbrk>
 8003a38:	1c43      	adds	r3, r0, #1
 8003a3a:	d102      	bne.n	8003a42 <_sbrk_r+0x1a>
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	b103      	cbz	r3, 8003a42 <_sbrk_r+0x1a>
 8003a40:	602b      	str	r3, [r5, #0]
 8003a42:	bd38      	pop	{r3, r4, r5, pc}
 8003a44:	200003c4 	.word	0x200003c4

08003a48 <__malloc_lock>:
 8003a48:	4770      	bx	lr

08003a4a <__malloc_unlock>:
 8003a4a:	4770      	bx	lr

08003a4c <_init>:
 8003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4e:	bf00      	nop
 8003a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a52:	bc08      	pop	{r3}
 8003a54:	469e      	mov	lr, r3
 8003a56:	4770      	bx	lr

08003a58 <_fini>:
 8003a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5a:	bf00      	nop
 8003a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5e:	bc08      	pop	{r3}
 8003a60:	469e      	mov	lr, r3
 8003a62:	4770      	bx	lr
